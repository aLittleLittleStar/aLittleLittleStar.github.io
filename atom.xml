<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>昨夜小楼又东风</title>
  
  <subtitle>纵豆蔻词工，青楼好梦，难赋深情</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-25T01:32:33.599Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LittleStar</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue图片懒加载原理及实现</title>
    <link href="http://yoursite.com/2019/09/25/JavaScript/Vue%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/09/25/JavaScript/Vue图片懒加载原理及实现/</id>
    <published>2019-09-25T01:22:32.000Z</published>
    <updated>2019-09-25T01:32:33.599Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>转：<br>　　<a href="https://www.jianshu.com/p/57e1055cc3fb" target="_blank" rel="noopener">Vue图片懒加载原理和实现</a><br>　　<a href="https://blog.csdn.net/Tom__cy/article/details/90299757" target="_blank" rel="noopener">Vue 中实现图片预加载 + 懒加载原理实现</a></p><h3 id="Vue图片懒加载原理及实现"><a href="#Vue图片懒加载原理及实现" class="headerlink" title="Vue图片懒加载原理及实现"></a>Vue图片懒加载原理及实现</h3><h4 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h4><p>　　<code>先将img标签的src链接设为同一张图片(默认图片)，当js监听到该图片进入可视窗口时，再将实际地址应用。</code></p><h4 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h4><h5 id="1-判断元素是否在可视范围"><a href="#1-判断元素是否在可视范围" class="headerlink" title="1.判断元素是否在可视范围"></a>1.判断元素是否在可视范围</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断元素是否在可视范围</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> isVisible(ele)&#123;</span><br><span class="line">  <span class="built_in">let</span> windowHeight = window.innerHeight</span><br><span class="line">  <span class="built_in">let</span> position = ele.getBoundingClientRect()</span><br><span class="line">  // 当元素的top偏移量小于页面大小并且大于高度的负数</span><br><span class="line">  <span class="keyword">if</span>(position.top&lt;windowHeight &amp;&amp; position.top&gt;-position.height)&#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-对图片实现懒加载"><a href="#2-对图片实现懒加载" class="headerlink" title="2.对图片实现懒加载"></a>2.对图片实现懒加载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 对图片进行懒加载</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> lazyLoad(img, src)&#123;</span><br><span class="line">  <span class="keyword">if</span>(img &amp;&amp; src &amp;&amp; isVisible(img))&#123; // 元素存在，元素未被加载，元素可见</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      img.setAttribute(<span class="string">'src'</span>, src)</span><br><span class="line">    &#125;, 1000) // 模拟网络请求</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-添加滚动监听"><a href="#3-添加滚动监听" class="headerlink" title="3.添加滚动监听"></a>3.添加滚动监听</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 窗口滚动</span><br><span class="line">window.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">  lazyLoad(img, src)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Vue插件实现代码"><a href="#Vue插件实现代码" class="headerlink" title="Vue插件实现代码"></a>Vue插件实现代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 判断元素可见</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> isVisible(el)&#123;</span><br><span class="line">  <span class="built_in">let</span> windowHeight = window.innerHeight</span><br><span class="line">  <span class="built_in">let</span> position = el.getBoundingClientRect()</span><br><span class="line">  // 当元素的top偏移量小于页面大小并且大于高度的负数</span><br><span class="line">  <span class="keyword">if</span>(position.top&lt;windowHeight &amp;&amp; position.top&gt;-position.height)&#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 对图片进行懒加载</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> lazyLoad(img, src)&#123;</span><br><span class="line">  <span class="keyword">if</span>(img &amp;&amp; src &amp;&amp; isVisible(img))&#123; // 元素存在，元素未被加载，元素可见</span><br><span class="line">    setTimeout(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      img.setAttribute(<span class="string">'src'</span>, src)</span><br><span class="line">    &#125;, 1000) // 模拟网络请求慢的情况</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  install(Vue, options)&#123;</span><br><span class="line">    Vue.directive(<span class="string">'lazy'</span>, &#123;</span><br><span class="line">      <span class="built_in">bind</span>: <span class="keyword">function</span>(el, binding, vnode)&#123;</span><br><span class="line">        el.setAttribute(<span class="string">'src'</span>, options.loading)</span><br><span class="line">        window.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">          lazyLoad(el, binding.value)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      inserted: <span class="keyword">function</span>(el, binding, vnode)&#123;</span><br><span class="line">        lazyLoad(el)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　main.js<br><code>Vue.use(myPlugin, {loading: defaultImg})</code></p><h4 id="在Vue中使用-vue-lazyload插件"><a href="#在Vue中使用-vue-lazyload插件" class="headerlink" title="在Vue中使用 vue-lazyload插件"></a>在Vue中使用 vue-lazyload插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.安装插件</span><br><span class="line">npm install vue-lazyload --save-dev</span><br><span class="line"></span><br><span class="line">2.在入口文件main.js中引入并使用</span><br><span class="line">import VueLazyload from <span class="string">'vue-lazyload'</span></span><br><span class="line"></span><br><span class="line">直接使用</span><br><span class="line">Vue.use(VueLazyload)</span><br><span class="line"></span><br><span class="line">或者添加自定义选项</span><br><span class="line">Vue.use(VueLazyload, &#123;</span><br><span class="line">  preLoad: 1.3,</span><br><span class="line">  error: <span class="string">'dist/error.png'</span>,</span><br><span class="line">  loading: <span class="string">'dist/loading.gif'</span>,</span><br><span class="line">  attempt: 1</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">3.修改图片显示方式为懒加载（将 :src 属性直接改为v-lazy）</span><br><span class="line">&lt;a href=<span class="string">"javascript:;"</span>&gt;</span><br><span class="line">  &lt;img v-lazy=<span class="string">"'/static/img/' + item.productImage"</span>&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>移动端适配</title>
    <link href="http://yoursite.com/2019/09/23/JavaScript/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    <id>http://yoursite.com/2019/09/23/JavaScript/移动端适配/</id>
    <published>2019-09-23T12:04:23.000Z</published>
    <updated>2019-09-23T12:06:22.848Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><p><a href="https://juejin.im/post/5b6cfcffe51d453a1d27080b" target="_blank" rel="noopener">移动端常见兼容性问题解决方案</a><br><a href="https://juejin.im/post/5add7a44f265da0b886d05f8#heading-0" target="_blank" rel="noopener">移动端适配问题解决方案</a><br><a href="https://www.jianshu.com/p/2a091bd289ba" target="_blank" rel="noopener">解决vue移动端适配问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="http://yoursite.com/2019/09/23/Ajax/AJAX/"/>
    <id>http://yoursite.com/2019/09/23/Ajax/AJAX/</id>
    <published>2019-09-23T11:47:04.000Z</published>
    <updated>2019-09-23T11:51:26.266Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><h3 id="AJAX简介"><a href="#AJAX简介" class="headerlink" title="AJAX简介"></a>AJAX简介</h3><p>　　AJAX全称为“Asynchronous Javascript And XML”， 即“异步JavaScript和XML”的意思。通过AJAX我们可以向服务器发送请求，在不阻塞页面的情况下进行数据交互，也可以理解为异步数据传输。在AJAX的帮助下我们的网页只需局部刷新即可更新数据的显示，减少了不必要的数据量，大大提高了用户体验，缩短了用户等待的时间，使得web应用程序更小、更快，更友好。<a id="more"></a></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>　　页面无刷新，用户体验好。<br>　　异步通信，更加快的响应能力。<br>　　减少冗余请求，减轻了服务器负担<br>　　基于标准化的并被广泛支持的技术，不需要下载插件或者小程序</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>　　ajax干掉了back按钮，即对浏览器后退机制的破坏。<br>　　存在一定的安全问题。<br>　　对搜索引擎的支持比较弱。<br>　　破坏了程序的异常机制。<br>　　无法用URL直接访问</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>　　场景 1. 数据验证<br>　　场景 2. 按需取数据<br>　　场景 3. 自动更新页面</p><h3 id="AJAX的核心-XMLHttpRequest对象"><a href="#AJAX的核心-XMLHttpRequest对象" class="headerlink" title="AJAX的核心 XMLHttpRequest对象"></a>AJAX的核心 XMLHttpRequest对象</h3><p>创建XML对象的实例：<code>const xhr = new XMLHttpRequest()</code></p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备启动一个AJAX请求</span></span><br><span class="line">.open()</span><br><span class="line"><span class="comment"># 设置请求头部信息</span></span><br><span class="line">.setRequestHeader()</span><br><span class="line"><span class="comment"># 发送AJAX请求</span></span><br><span class="line">.send()</span><br><span class="line"><span class="comment"># 获得响应头部信息</span></span><br><span class="line">.getResponseHeader()</span><br><span class="line"><span class="comment"># 获得一个包含所有头部信息的长字符串</span></span><br><span class="line">.getAllResponseHeader()</span><br><span class="line"><span class="comment"># 取消异步请求</span></span><br><span class="line">.abort()</span><br></pre></td></tr></table></figure><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个JavaScript函数对象，当readyState属性改变时会调用它。</span></span><br><span class="line"><span class="comment"># 回调函数会在user interface线程中调用。</span></span><br><span class="line">onreadystatechange</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示“请求”/“响应”过程的当前活动阶段</span></span><br><span class="line"><span class="comment"># HTTP 请求的状态.当一个 XMLHttpRequest 初次创建时，</span></span><br><span class="line"><span class="comment"># 这个属性的值从 0 开始，直到接收到完整的 HTTP 响应，这个值增加到 4。</span></span><br><span class="line"><span class="comment"># 0 Uninitialized 初始化状态。XMLHttpRequest 对象已创建或已被 abort() 方法重置。</span></span><br><span class="line"><span class="comment"># 1 Open open() 方法已调用，但是 send() 方法未调用。请求还没有被发送。</span></span><br><span class="line"><span class="comment"># 2 Sent Send() 方法已调用，HTTP 请求已发送到 Web 服务器。未接收到响应。</span></span><br><span class="line"><span class="comment"># 3 Receiving   所有响应头部都已经接收到。响应体开始接收但未完成。</span></span><br><span class="line"><span class="comment"># 4 Loaded      HTTP 响应已经完全接收。</span></span><br><span class="line"><span class="comment"># readyState 的值不会递减，除非当一个请求在处理过程中的时候调用了</span></span><br><span class="line"><span class="comment">#  abort() 或 open() 方法。每次这个属性的值增加的时候，都会触发 </span></span><br><span class="line"><span class="comment"># onreadystatechange 事件句柄。</span></span><br><span class="line">.readyState</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目前为止为服务器接收到的响应体（不包括头部），或者如果还没有接收到数据的话，</span></span><br><span class="line"><span class="comment"># 就是空字符串。</span></span><br><span class="line"><span class="comment"># 如果 readyState 小于 3，这个属性就是一个空字符串。当 readyState 为 3，</span></span><br><span class="line"><span class="comment"># 这个属性返回目前已经接收的响应部分。如果 readyState 为 4，这个属性保存</span></span><br><span class="line"><span class="comment"># 了完整的响应体。</span></span><br><span class="line">.responseText</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果响应的内容类型时text/xml或application/xml，</span></span><br><span class="line"><span class="comment"># 该属性将保存包含着相应数据的XML DOM文档</span></span><br><span class="line">.responseXML</span><br><span class="line"></span><br><span class="line"><span class="comment"># 响应的HTTP状态</span></span><br><span class="line">.status</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP状态的说明</span></span><br><span class="line">.statusText</span><br></pre></td></tr></table></figure><h5 id="XMLHttpRequest-方法"><a href="#XMLHttpRequest-方法" class="headerlink" title="XMLHttpRequest 方法"></a>XMLHttpRequest 方法</h5><h6 id="abort"><a href="#abort" class="headerlink" title="abort()"></a>abort()</h6><p>取消当前响应，关闭连接并且结束任何未决的网络活动。<br>　　这个方法把 <code>XMLHttpRequest</code> 对象重置为 <code>readyState</code>为 0 的状态，并且取消所有未决的网络活动。例如，如果请求用了太长时间，而且响应不再必要的时候，可以调用这个方法。</p><h6 id="getAllResponseHeaders"><a href="#getAllResponseHeaders" class="headerlink" title="getAllResponseHeaders()"></a>getAllResponseHeaders()</h6><p>把 HTTP 响应头部作为未解析的字符串返回。<br>　　如果 <code>readyState</code> 小于 3，这个方法返回 null。否则，它返回服务器发送的所有 HTTP 响应的头部。头部作为单个的字符串返回，一行一个头部。每行用换行符 <code>&quot;\r\n&quot;</code> 隔开。</p><h6 id="getResponseHeader"><a href="#getResponseHeader" class="headerlink" title="getResponseHeader()"></a>getResponseHeader()</h6><p>　　返回指定的 HTTP 响应头部的值。其参数是要返回的 <code>HTTP</code> 响应头部的名称。可以使用任何大小写来制定这个头部名字，和响应头部的比较是不区分大小写的。<br>　　该方法的返回值是指定的 HTTP 响应头部的值，如果没有接收到这个头部或者 readyState 小于 3 则为空字符串。如果接收到多个有指定名称的头部，这个头部的值被连接起来并返回，使用逗号和空格分隔开各个头部的值。</p><h6 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h6><p>初始化一个请求. 该方法用于JavaScript代码中;如果是本地代码, 使用 openRequest())方法代替.</p><blockquote><p>注意: 在一个已经激活的request下（已经调用open()或者openRequest()方法的request）再次调用这个方法相当于调用了abort（）方法。</p></blockquote><p>参数：<br><code>method</code><br>　　请求所使用的HTTP方法; 例如 “GET”, “POST”, “PUT”, “DELETE”等. 如果下个参数是非HTTP(S)的URL,则忽略该参数.<br><code>url</code><br>　　该请求所要访问的URL<br><code>async</code><br>　　一个可选的布尔值参数，默认为true,意味着是否执行异步操作，如果值为false,则send()方法不会返回任何东西，直到接受到了服务器的返回数据。如果为值为true，一个对开发者透明的通知会发送到相关的事件监听者。这个值必须是true,如果multipart 属性是true，否则将会出现一个意外。<br><code>user</code><br>　　用户名,可选参数,为授权使用;默认参数为空string.<br><code>password</code><br>　　密码,可选参数,为授权使用;默认参数为空string.</p><h6 id="sned"><a href="#sned" class="headerlink" title="sned()"></a>sned()</h6><p>发送 HTTP 请求，使用传递给 open() 方法的参数，以及传递给该方法的可选请求体。</p><h6 id="setRequestHeader"><a href="#setRequestHeader" class="headerlink" title="setRequestHeader()"></a>setRequestHeader()</h6><p>向一个打开但未发送的请求设置或添加一个 HTTP 请求(设置请求头)。<br>参数：<br><code>header</code><br>　　将要被赋值的请求头名称<br><code>value</code><br>　　给指定的请求头赋的值</p><h3 id="发送AJAX请求"><a href="#发送AJAX请求" class="headerlink" title="发送AJAX请求"></a>发送AJAX请求</h3><h4 id="设置请求头部信息"><a href="#设置请求头部信息" class="headerlink" title="设置请求头部信息"></a>设置请求头部信息</h4><p>　　每个HTTP请求和响应都会带有相应的头部信息，包含一些与数据，收发者网络环境与状态等相关信息。XMLHttpRequest对象提供的.setRequestHeader()方法为开发者提供了一个操作这两种头部信息的方法，并允许开发者自定义请求头的头部信息。<br>默认情况下，当发送AJAX请求时，会附带以下头部信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 浏览器能够处理的内容类型</span></span><br><span class="line">Accept</span><br><span class="line"><span class="comment"># 浏览器能够显示的字符集</span></span><br><span class="line">Accept-Charset</span><br><span class="line"><span class="comment"># 浏览器能够处理的压缩编码</span></span><br><span class="line">Accept-Encoding</span><br><span class="line"><span class="comment"># 浏览器当前设置的语言</span></span><br><span class="line">Accept-Language</span><br><span class="line"><span class="comment"># 浏览器与服务器之间连接的类型</span></span><br><span class="line">Connection</span><br><span class="line"><span class="comment"># 当前页面设置的任何Cookie</span></span><br><span class="line">Cookie</span><br><span class="line"><span class="comment"># 发出请求的页面所在的域</span></span><br><span class="line">Host</span><br><span class="line"><span class="comment"># 发出请求的页面URI</span></span><br><span class="line">Referer</span><br><span class="line"><span class="comment"># 浏览器的用户代理字符串</span></span><br><span class="line">User-Agent</span><br></pre></td></tr></table></figure></p><p><strong>注意:</strong><br>　　部分浏览器不允许使用<code>.setRequestHeader()</code>方法重写默认请求头信息，因此自定义请求头信息是更加安全的方法：<br><code># 自定义请求头</code><br><code>xhr.setRequestHeader(&quot;myHeader&quot;, &quot;MyValue&quot;)</code></p><h4 id="发送AJAX请求-1"><a href="#发送AJAX请求-1" class="headerlink" title="发送AJAX请求"></a>发送AJAX请求</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发送AJAX请求</span></span><br><span class="line"><span class="comment"># 使用get方法发送同步请求(false)</span></span><br><span class="line"><span class="built_in">let</span> xhr = new XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'example.php'</span>, <span class="literal">false</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">'myHeader'</span>, <span class="string">'goodHeader'</span>)</span><br><span class="line">xhr.send(null)</span><br><span class="line"></span><br><span class="line"><span class="comment"># POST请求</span></span><br><span class="line"><span class="built_in">let</span> xhr = new XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">'post'</span>, <span class="string">'example.php'</span>, <span class="literal">false</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">'myHeader'</span>, <span class="string">'goodHeader'</span>)</span><br><span class="line">shr.send(some_data)</span><br></pre></td></tr></table></figure><h4 id="处理响应"><a href="#处理响应" class="headerlink" title="处理响应"></a>处理响应</h4><p>同步的GET请求响应：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const xhr = new XMLHttpRequest()</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"example.php"</span>, <span class="literal">false</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">"myHeader"</span>, <span class="string">"goodHeader"</span>)</span><br><span class="line">xhr.send(null)</span><br><span class="line"><span class="comment"># 由于是同步的AJAX请求，因此只有当服务器响应后才会继续执行下面的代码</span></span><br><span class="line"><span class="comment"># 因此xhr.status的值一定不为默认值</span></span><br><span class="line"><span class="keyword">if</span>((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status === 304) &#123;</span><br><span class="line">  console.log(<span class="string">"xhr.responseText:"</span>, xhr.responseText);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  console.log(<span class="string">"Request was unsuccessful:"</span>, xhr.status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　上面的代码不难理解，我们通过之前提到的<code>xhr.status</code>属性（如果你忘记了，它存储着响应的HTTP状态）判断请求是否成功，如果成功的话，我们将读取<code>xhr.responseText</code>属性中存储的返回值。但是，当我们的请求为异步时，问题就稍微变得复杂了，由于是异步的请求，在<code>xhr.send(null)</code>语句被执行后，<code>JavaScript</code>引擎会紧接着执行下面的判断语句，而这时由于尚未来得及响应，我们注定会得到一个默认的<code>xhr.status</code>值，因此，我们永远都不可能获取请求的资源了。<br>如何解决这个问题？答案是通过为<code>XMLHTTPRequest</code>实例添加<code>onreadystatechange</code>事件处理程序（当然你也可以直接使用DOM2级规范规定的<code>.addEventListener()</code>方法，但是注意，IE8是不支持该方法的）。<br>　　xhr实例的<code>readystatechange</code>事件会监听<code>xhr.readyState</code>属性的变化，你可以将这个属性想象为一个计数器，随着AJAX流程的推进而不断累加，其可取的值如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　0：未初始化 -- 尚未调用.open()方法</span><br><span class="line">　　1：启动 -- 已经调用.open()方法，但尚未调用.send()方法</span><br><span class="line">　　2：发送 -- 已经调用.send()方法，但尚未接收到响应</span><br><span class="line">　　3：接收 -- 已经接收到部分响应数据</span><br><span class="line">　　4：完成 -- 已经接收到全部响应数据，而且已经可以在客户端使用了</span><br></pre></td></tr></table></figure></p><p>有了这个时间处理程序对AJAX进程做监听，剩下的事就简单多了，一个<code>异步</code>的<code>GET</code>请求代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const xhr = new XMLHttpRequest()</span><br><span class="line"><span class="comment"># 等价于 xhr.onreadystatechange = function()&#123;&#125;</span></span><br><span class="line"><span class="comment"># 利用onreadystatechange监测状态</span></span><br><span class="line">xhr.onreadystatechange = () =&gt; &#123;</span><br><span class="line">  <span class="comment"># readyState为4表示请求响应完成</span></span><br><span class="line">  <span class="keyword">if</span>(xhr.readyState == 4) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status === 304) &#123;</span><br><span class="line">      console.log(<span class="string">"xhr.responseText:"</span>, xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      console.log(<span class="string">"Request was unsuccessful:"</span>, xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'example.php'</span>, <span class="literal">true</span>)</span><br><span class="line">xhr.send(null)</span><br></pre></td></tr></table></figure></p><h3 id="其他库框架中的AJAX"><a href="#其他库框架中的AJAX" class="headerlink" title="其他库框架中的AJAX"></a>其他库框架中的AJAX</h3><h4 id="jQuery中的AJAX"><a href="#jQuery中的AJAX" class="headerlink" title="jQuery中的AJAX"></a>jQuery中的AJAX</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    method: <span class="string">'GET'</span>, <span class="comment"># 1.9.0本版前用'type'</span></span><br><span class="line">    url: <span class="string">"/test/"</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="keyword">done</span>(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'执行成功'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.fail(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'执行出错'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Vue-js中的AJAX"><a href="#Vue-js中的AJAX" class="headerlink" title="Vue.js中的AJAX"></a>Vue.js中的AJAX</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.http.get(<span class="string">'/test/'</span>).<span class="keyword">then</span>((response) =&gt; &#123;</span><br><span class="line">    console.log(<span class="string">'执行成功'</span>);</span><br><span class="line">&#125;, (response) =&gt; &#123;</span><br><span class="line">    console.log(<span class="string">'执行出错'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="状态值和状态码"><a href="#状态值和状态码" class="headerlink" title="状态值和状态码"></a>状态值和状态码</h3><h4 id="状态值于状态码："><a href="#状态值于状态码：" class="headerlink" title="状态值于状态码："></a>状态值于状态码：</h4><blockquote><p>在ajax时间运行过程中，对于访问XMLHttpRequest不是一次就完成的，而是经历多种状态后获取的结果。<br>对于这种状态在ajax中分为5中状态：<br>0: (未初始化)还没有调用send()方法。<br>1: (载入)已经调用send()方法，正在派发请求。<br>2: (载入完成)send()已经执行完成，已经接收到全部的响应内容。<br>3: (交互)正在解析响应内容。<br>4: (完成)响应内容已经解析完成，用户可以调用。</p></blockquote><blockquote><p>ajax状态值和状态码的区别：<br>ajax的状态值指，运行ajax时运行的几种状态，无论是成功还是失败都要响应的步骤。如：正在派发，正在响应等，由ajax对象和<br>服务器之间交互是所得。使用ajax.readyState获得（0~4）<br>ajax状态码是值，ajax无论请求是否成功，根据http所提及的用户信息，用服务器返回http头信息代码，使用ajax.state来获得</p></blockquote><blockquote><p>这就是我们在使用AJAX时为什么采用下面的方式判断所获得的信息是否正确的原因。<br>if(ajax.readyState == 4 &amp;&amp; ajax.status == 200) {<br>    putData(ajax.responseText);<br>}</p></blockquote><h4 id="ajax状态码："><a href="#ajax状态码：" class="headerlink" title="ajax状态码："></a>ajax状态码：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">AJAX状态码说明</span><br><span class="line"></span><br><span class="line">1**：请求收到，继续处理</span><br><span class="line">2**：操作成功收到，分析、接受</span><br><span class="line">3**：完成此请求必须进一步处理</span><br><span class="line">4**：请求包含一个错误语法或不能完成</span><br><span class="line">5**：服务器执行一个完全有效请求失败</span><br><span class="line">100——客户必须继续发出请求</span><br><span class="line">101——客户要求服务器根据请求转换HTTP协议版本</span><br><span class="line">200——交易成功</span><br><span class="line">201——提示知道新文件的URL</span><br><span class="line">202——接受和处理、但处理未完成</span><br><span class="line">203——返回信息不确定或不完整</span><br><span class="line">204——请求收到，但返回信息为空</span><br><span class="line">205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件</span><br><span class="line">206——服务器已经完成了部分用户的GET请求</span><br><span class="line">300——请求的资源可在多处得到</span><br><span class="line">301——删除请求数据</span><br><span class="line">302——在其他地址发现了请求数据</span><br><span class="line">303——建议客户访问其他URL或访问方式</span><br><span class="line">304——客户端已经执行了GET，但文件未变化</span><br><span class="line">305——请求的资源必须从服务器指定的地址得到</span><br><span class="line">306——前一版本HTTP中使用的代码，现行版本中不再使用</span><br><span class="line">307——申明请求的资源临时性删除</span><br><span class="line">400——错误请求，如语法错误</span><br><span class="line">401——请求授权失败</span><br><span class="line">402——保留有效ChargeTo头响应</span><br><span class="line">403——请求不允许</span><br><span class="line">404——没有发现文件、查询或URl</span><br><span class="line">405——用户在Request-Line字段定义的方法不允许</span><br><span class="line">406——根据用户发送的Accept拖，请求资源不可访问</span><br><span class="line">407——类似401，用户必须首先在代理服务器上得到授权</span><br><span class="line">408——客户端没有在用户指定的饿时间内完成请求</span><br><span class="line">409——对当前资源状态，请求不能完成</span><br><span class="line">410——服务器上不再有此资源且无进一步的参考地址</span><br><span class="line">411——服务器拒绝用户定义的Content-Length属性请求</span><br><span class="line">412——一个或多个请求头字段在当前请求中错误</span><br><span class="line">413——请求的资源大于服务器允许的大小</span><br><span class="line">414——请求的资源URL长于服务器允许的长度</span><br><span class="line">415——请求资源不支持请求项目格式</span><br><span class="line">416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</span><br><span class="line">417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求</span><br><span class="line">500——服务器产生内部错误</span><br><span class="line">501——服务器不支持请求的函数</span><br><span class="line">502——服务器暂时不可用，有时是为了防止发生系统过载</span><br><span class="line">503——服务器过载或暂停维修</span><br><span class="line">504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长</span><br><span class="line">505——服务器不支持或拒绝支请求头中指定的HTTP版本</span><br></pre></td></tr></table></figure><h4 id="ajax类库"><a href="#ajax类库" class="headerlink" title="ajax类库"></a>ajax类库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">function</span> ajax(value)&#123;</span><br><span class="line">        var url = value.url;</span><br><span class="line">        var <span class="built_in">type</span> = value.type || <span class="string">"get"</span>;</span><br><span class="line">        var data = value.data || <span class="string">""</span>;</span><br><span class="line">        var success = value.success;</span><br><span class="line">        var error = value.error || <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        //1、创建AJAX对象</span><br><span class="line">        var oAjax;</span><br><span class="line"></span><br><span class="line">        try&#123;</span><br><span class="line">            //Firefox,Opera 8.0+, Safari</span><br><span class="line">            oAjax = new XMLHttpRequest();</span><br><span class="line">        &#125;catch(e)&#123;</span><br><span class="line">            //Internet Explorer</span><br><span class="line">            try&#123;</span><br><span class="line">                oAjax = new ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</span><br><span class="line">            &#125;catch(e)&#123;</span><br><span class="line">                try&#123;</span><br><span class="line">                    oAjax = new ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">                &#125;catch(e)&#123;</span><br><span class="line">                    alert(<span class="string">"浏览器不支持ajax"</span>);</span><br><span class="line">                    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //链接服务器</span><br><span class="line">        oAjax.open(<span class="built_in">type</span>, url, <span class="literal">true</span>);</span><br><span class="line">        //发送请求</span><br><span class="line">        oAjax.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded;charset=UTF-8"</span>);</span><br><span class="line">        oAjax.send(data);</span><br><span class="line">        //数据接收</span><br><span class="line">        oAjax.onreadystatechange = <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            <span class="keyword">if</span>(oAjax.readyState == 4)&#123;</span><br><span class="line">                <span class="keyword">if</span>(oAjax.stack == 200)&#123;</span><br><span class="line">                    var data = oAjax.responseText;</span><br><span class="line">                    success(data);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                        error();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>转载：<br>　　<a href="https://juejin.im/post/5a20b1f1f265da432529179c" target="_blank" rel="noopener">使用AJAX</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h3 id=&quot;AJAX简介&quot;&gt;&lt;a href=&quot;#AJAX简介&quot; class=&quot;headerlink&quot; title=&quot;AJAX简介&quot;&gt;&lt;/a&gt;AJAX简介&lt;/h3&gt;&lt;p&gt;　　AJAX全称为“Asynchronous Javascript And XML”， 即“异步JavaScript和XML”的意思。通过AJAX我们可以向服务器发送请求，在不阻塞页面的情况下进行数据交互，也可以理解为异步数据传输。在AJAX的帮助下我们的网页只需局部刷新即可更新数据的显示，减少了不必要的数据量，大大提高了用户体验，缩短了用户等待的时间，使得web应用程序更小、更快，更友好。&lt;/p&gt;
    
    </summary>
    
      <category term="AJAX" scheme="http://yoursite.com/categories/AJAX/"/>
    
    
      <category term="AJAX" scheme="http://yoursite.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>数据埋点</title>
    <link href="http://yoursite.com/2019/09/23/JavaScript/%E6%95%B0%E6%8D%AE%E5%9F%8B%E7%82%B9/"/>
    <id>http://yoursite.com/2019/09/23/JavaScript/数据埋点/</id>
    <published>2019-09-23T11:28:09.000Z</published>
    <updated>2019-09-23T12:04:03.028Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><h2 id="数据埋点"><a href="#数据埋点" class="headerlink" title="数据埋点"></a>数据埋点</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>　　所谓埋点就是在应用中特定的流程收集一些信息，用来跟踪应用使用的状况，后续用来进一步优化产品或是提供运营的数据支撑，包括访问数（<code>Visits</code>），访客数（<code>Visitor</code>），停留时长（<code>Time On Site</code>），页面浏览数（<code>Page Views</code>）和跳出率（<code>Bounce Rate</code>）。这样的信息收集可以大致分为两种：页面统计（<code>track this virtual page view</code>），统计操作行为（<code>track this button by an event</code>）</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>现在埋点的主流有两种方式：<br>　　第一种：自己公司研发在产品中注入代码统计，并搭建起相应的后台查询。<br>　　第二种：第三方统计工具，如友盟、神策、<code>Talkingdata</code>、<code>GrowingIO</code>等。</p><h3 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标<a id="more"></a></h3><h4 id="访问与访客"><a href="#访问与访客" class="headerlink" title="访问与访客"></a>访问与访客</h4><p>　　访问次数（Visits）与访问人数（Vistors）是几乎所有应用都需要统计的指标，这也是最基础的指标。<br>　　对于应用的统计来说，经常看到的DAU，MAU，UV等指标都是指统计访客（Vistors）。访问（Visits）是指会话层，用户打开应用花一段时间浏览又离开，从指标定义（访问次数）来说这被称之为统计会话（Session）数。<br>　　一次会话（Session 或 Visit）是打开应用的第一个请求（打开应用）和最后一个请求决定的。如果用户打开应用然后放下手机或是离开电脑，并在接下来30分钟内没有任何动作，此次会话自动结束，通常也算作一次访问或会话期（30分钟是早起网页版应用约定俗成的会话数定义，目前用户停留在应用的时长变长，30分钟的限定也可能随之不同，总之是能代表一次用户访问的时长）。<br>　　在计算访问人数（Vistors）时，埋点上报的数据是尽可能接近真实访客的人数。对于有需要统计独立访客这个指标的场景，这里还是需要强调一下，访问人数（Vistors）并不是真实独立的人，因此收集数据时必须知道访问人数虽然能够很好的反映使用应用的真实访问者的数量，但不等于使用应用的真实人数。（原因是，重复安装的应用，或是手机参数被修改都会使得独立访客的指标收到影响。计算访问人数的埋点都是依赖Cookie，用户打开应用，应用都会在此人的终端创建一个独立Cookie, Cookie会被保留，但还是难免会被用户手动清理或是Cookie被禁用导致同一用户使用应用Cookie不一致，所以独立访客只能高度接近于使用应用的真实人数。）</p><h4 id="停留时长"><a href="#停留时长" class="headerlink" title="停留时长"></a>停留时长</h4><p>　　停留时长用来衡量用户在应用的某一个页面或是一次访问（会话）所停留的时间。<br>　　页面停留时长，表示在每个页面所花费的时间；例如：首页就是进入首页（10：00）到离开首页进入下一个页面(10:01)的时长，首页停留时长计算为1分钟。页面A是2分钟。停留时长的数据并不都是一定采集得到的，比如页面B进入时间（10：03），离开出现异常或是退出时间没有记录，这时候计算就是0 （所以指标计算时需要了解埋点的状况，剔除这样的无效数据）。<br>　　应用的停留时长，表示一次访问（会话）所停留的时间，计算起来就是所有页面的访问时长，同样是上一个流程，应用的停留时长就是4分钟。</p><h4 id="跳出率"><a href="#跳出率" class="headerlink" title="跳出率"></a>跳出率</h4><p>　　跳出率的计算方法现在在各个公司还是很多种，最经常被使用的是：用户只访问了一个页面所占的会话比例（原因是：假设这种场景，用户来了访问了一个页面就离开了，想想用户使用的心里画面应该是：打开应用，心想什么鬼，然后关闭应用甚至卸载了。这个场景多可怕，这也是为什么跳出率指标被如此关注）<br>　　跳出率可以分解到两个层次：<code>一是整个应用的跳出率</code>，<code>二是重点的着陆页的跳出率</code>，甚至是搜索关键词的跳出率。跳出率的指标可操作性非常强，通过统计跳出率可以直接发现页面的问题发现关键词的问题。</p><h4 id="退出率"><a href="#退出率" class="headerlink" title="退出率"></a>退出率</h4><p>　　退出率是针对页面的，这个指标的目标很简单，就是在针对某个页面有多少用户离开了应用，主要用户反映用户从应用离开的情况。哪些页面需要被改进最快的方式被发掘。（注意：退出率高不一定是坏事。例如：预测流程的最终节点的退出率就应该是高的）</p><h4 id="转化率"><a href="#转化率" class="headerlink" title="转化率"></a>转化率</h4><p>　　我们在产品上投入这么多，不就是为了衡量产出么？所以对于电商类应用，还有比转化率更值得关注的指标吗？转化率的计算方法是某种产出除以独立访客或是访问量，对于电商产品来说，就是提交订单用户数除以独立访客。<br>　　转化率的计算看起来想到那简单，但却是埋点中最贴近业务的数据收集。这也是最体现埋点技巧的指标，需要结合业务特点制定计算方法。提交订单量/访客数是最基本的转化率，转化率还可以分层次，指定用户路径的，如：完成某条路径的提交订单数/访客数。<br>　　试着找一条路径，想想转化率的数据怎么得来的吧，埋点都收集了什么样的数据吧？参与度参与度并不是一个指标，而是一系列的指标的统称，例如访问深度，访问频次，针对电商的下单次数，针对内容服务商的播放次数，及用户行为序列这些都可以是衡量参与度的指标。之所以把参与度列为一个指标，是希望大家明白把指标结合业务，产生化学反应，活学活用去发现事物的本质。</p><h4 id="埋点的内容"><a href="#埋点的内容" class="headerlink" title="埋点的内容"></a>埋点的内容</h4><p>　　看完关键的这些指标后，其实埋点大致分为两部分，一部分是统计应用页面访问情况，即页面统计，随页面访问动作发生时进行上报；另外一部分是统计应用内的操作行为，在页面中操作时进行上报（例如：组件曝光时，组件点击时，上滑，下滑时）。<br>　　为了统计到所需要的指标，应用中的所有页面，事件都被唯一标记，用户的信息，设备的信息，时间参数以及符合业务需要的参数具体内容被附加上报，就是埋点。</p><h3 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h3><h4 id="1、提高网站的转化率"><a href="#1、提高网站的转化率" class="headerlink" title="1、提高网站的转化率"></a>1、提高网站的转化率</h4><p>　　根据页面埋点可得到一些重要信息，它告诉你用户对网站的反应，以及如何<code>提高网站流量</code>、<code>改进网站性能</code>，<code>了解用户访问网站的行为</code>，<code>为更好地满足用户需求提供支持</code>。 </p><h4 id="2、反应用户黏度"><a href="#2、反应用户黏度" class="headerlink" title="2、反应用户黏度"></a>2、反应用户黏度</h4><p>　　即使网站吸引了很多用户访问，但是通过流量分析发现，用户停留的时间非常短，重复访问用户不多，用户平均浏览的页面也少，这样的网站用户黏度不够，有流量但是没有忠实的用户，一旦有其它可替代网站，用户随时可能流失。这样的网站，如果不采取有效的运营措施，很难有长期发展的后劲。</p><h4 id="3、为网站内容管理和网站的产品策划提供方向"><a href="#3、为网站内容管理和网站的产品策划提供方向" class="headerlink" title="3、为网站内容管理和网站的产品策划提供方向"></a>3、为网站内容管理和网站的产品策划提供方向</h4><p>　　通过流量分析，可以挖掘出整个网站哪个频道最有人气，频道之间的流量比例是多少，每个页面的流量是多少，哪个页面最受欢迎，每个页面中具体的哪个栏目点击 量最高，这样通过对频道、栏目、页面的具体流量分析和对比，可以挖掘出用户的需求，发现用户最关心什么内容，这对评估网站频道、内容、页面的价值有重要的 参考作用，也对网站内容下一步的优化有直接的参考意义。</p><blockquote><p>转载：<br><a href="https://zhuanlan.zhihu.com/p/25195217" target="_blank" rel="noopener">数据埋点是什么？设置埋点的意义是什么？</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h2 id=&quot;数据埋点&quot;&gt;&lt;a href=&quot;#数据埋点&quot; class=&quot;headerlink&quot; title=&quot;数据埋点&quot;&gt;&lt;/a&gt;数据埋点&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;　　所谓埋点就是在应用中特定的流程收集一些信息，用来跟踪应用使用的状况，后续用来进一步优化产品或是提供运营的数据支撑，包括访问数（&lt;code&gt;Visits&lt;/code&gt;），访客数（&lt;code&gt;Visitor&lt;/code&gt;），停留时长（&lt;code&gt;Time On Site&lt;/code&gt;），页面浏览数（&lt;code&gt;Page Views&lt;/code&gt;）和跳出率（&lt;code&gt;Bounce Rate&lt;/code&gt;）。这样的信息收集可以大致分为两种：页面统计（&lt;code&gt;track this virtual page view&lt;/code&gt;），统计操作行为（&lt;code&gt;track this button by an event&lt;/code&gt;）&lt;/p&gt;
&lt;h3 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h3&gt;&lt;p&gt;现在埋点的主流有两种方式：&lt;br&gt;　　第一种：自己公司研发在产品中注入代码统计，并搭建起相应的后台查询。&lt;br&gt;　　第二种：第三方统计工具，如友盟、神策、&lt;code&gt;Talkingdata&lt;/code&gt;、&lt;code&gt;GrowingIO&lt;/code&gt;等。&lt;/p&gt;
&lt;h3 id=&quot;指标&quot;&gt;&lt;a href=&quot;#指标&quot; class=&quot;headerlink&quot; title=&quot;指标&quot;&gt;&lt;/a&gt;指标&lt;/h3&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/07/21/%E9%9D%A2%E8%AF%95%E9%A2%98-%E6%80%9D%E7%BB%B4/%E5%87%86%E5%A4%87/"/>
    <id>http://yoursite.com/2019/07/21/面试题-思维/准备/</id>
    <published>2019-07-21T15:13:17.822Z</published>
    <updated>2019-07-21T15:49:55.569Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">【百度-母婴业务部-前端】校招提前批内推</span><br><span class="line">lanjianguo@baidu.com</span><br><span class="line">1.姓名2.邮箱3.手机号4.简历5.推荐词（选填）</span><br><span class="line">坑位有限，先到先得，截止到8月14日。</span><br><span class="line">百度招聘官网：https://talent.baidu.com/external/baidu/campus.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">旷视科技</span><br><span class="line">sihaiyang@megvii.com</span><br><span class="line">发邮件时请注明岗位和工作地点，默认北京，正文请备注自己的姓名、邮箱、手机号。附件为简历，简历建议命名为：姓名-学校-手机号。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">陌陌</span><br><span class="line">https://uploadfiles.nowcoder.com/images/20190715/340047502_1563204023495_E4050D8294A27655000FDBF912B1FD08</span><br><span class="line">1.打开下方二维码（用微信扫描）</span><br><span class="line">2.选择自己对应的岗位</span><br><span class="line">3.扔简历</span><br><span class="line">4.内推完成</span><br><span class="line">https://app.mokahr.com/recommendation-apply/immomo/2050/?recommenderId=192152&amp;<span class="built_in">hash</span>=%23%2Fjobs%3Fkeyword%3D2020%26page%3D1%26isCampusJob%3D1%26_k%3D4v9ivu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">快手</span><br><span class="line">867326226@qq.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">贝壳找房</span><br><span class="line">23107689内推人:莫健锋</span><br><span class="line">http://campus.ke.com/Campus</span><br><span class="line">岗位 下划线 姓名 下划线 学校.pdf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">拼多多</span><br><span class="line">xulongxiang@pinduoduo.com</span><br><span class="line">2020届学霸批+姓名+学校+岗位.pdf</span><br><span class="line">上海 web前端研发工程师</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">商汤研究院招前端-cv实习生</span><br><span class="line">sunjiaming@sensetime.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">阿里巴巴[秋招]</span><br><span class="line">qijin.hq@alibaba-inc.com</span><br><span class="line">【秋招内推】 姓名_学校_专业_L7GT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QQ音乐提前批来啦招聘web前端工程师</span><br><span class="line">坐标深圳，qqmusic_fe@outlook.com</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">星环科技</span><br><span class="line">前端开发工程师（实习生）</span><br><span class="line">扫描二维码，关注“星环科技招聘”，选择“星招聘”，进入校园招聘页面，</span><br><span class="line">选择你心仪的岗位进行投递</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端-面试题</title>
    <link href="http://yoursite.com/2019/07/21/%E9%9D%A2%E8%AF%95%E9%A2%98-%E6%80%9D%E7%BB%B4/vue%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2019/07/21/面试题-思维/vue面试题/</id>
    <published>2019-07-21T09:53:08.000Z</published>
    <updated>2019-07-21T15:03:15.681Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>简单自我介绍, 做过哪些项目, 使用哪些技术栈 ?<br>如何看待前端框架选型 ?<br>vue的如何实现双向绑定的 ？<br>react 虚拟DOM 是什么? 如何实现? 说一下diff算法 ?<br>工作中最出色的点, 和你最头疼的问题 如何解决的 ?<br>平时如何学习, 最近接触了解了哪些新的知识 ?<br>技术一面<br>简单自我介绍, 介绍一下你的项目, 技术栈 ?<br>react和vue的比较 ?<br>React Diff 算法 ?<br>观察者模式实现 ?<br>http报文头部有哪些字段? 有什么意义 ?<br>移动端高清方案如何解决 ?<br>webpack的原理, loader 和 plugin 是干什么的? 有自己手写过么 ?<br>简述从网页输入url到网页展示的过程发生了哪些事情 ?<br>SSR 和 客户端渲染有什么区别 , vue是如何实现绑定事件的 ?<br>简述公司node架构中容灾的实现 ?<br>浏览器事件有哪些过程? 为什么一般在冒泡阶段, 而不是在捕获阶段注册监听? addEventListener 参数分别是什么 ?<br>面向对象如何实现? 需要复用的变量 怎么处理 ?<br>移动端300ms延时的原因? 如何处理?<br>主流框架的数据单向/双向绑定实现原理 ?<br>简述转行经历, 如何学习 ?<br>你觉得自己在前端工作的最大的优点是什么 拿实际工作的内容举例?<br>技术二面<br>和一面前3问基本一致,简述项目,React vue区别 virsualDOM实现<br>DIFF算法为什么是O(n)复杂度而不是O(n^3)<br>http code码?<br>移动端rem布局如何实现? 简述原理?<br>JSbridge原理, js和native是如何通信的?<br>Rollup和webpack区别, treeshaking是什么?<br>TCP三次握手的过程, get post请求的区别 ?<br>静态文件的浏览器缓存如何实现?<br>前端跨域方案<br>http 请求包含哪些字段 分别是什么意思<br>js 有哪些数据类型 如何判断? null 和 undefined区别 应用场景?<br>new String(‘a’) 和 ‘a’ 是一样的么?<br>移动端如何实现下拉到底部 跟随移动 结束后回弹的动画?<br>移动端如何优化首页白屏时间过长 ?<br>ES6 generator函数简述<br>数组去重实现?<br>js浮点数运算不精确 如何解决?<br>工作中最得意和出色的点, 头疼的点, 问题如何解决的<br>为何换工作?<br>聊了下阿里的压力,文化<br>技术三面<br>公司的前端工程化实践<br>转行之后是如何自学前端的, 学习途径 有没有一些自己的代码<br>DOM基础知识,添加元素,删除元素等等…<br>DOM节点类型<br>正则表达式如何匹配一段url ?在正则表达式中有哪几种作用?<br>移动端优化方式? 离线包是如何实现的?</p><p><a href="https://ustbhuangyi.github.io/vue-analysis/" target="_blank" rel="noopener">https://ustbhuangyi.github.io/vue-analysis/</a></p><p>我的手机 2019/3/14 10:04:34<br><a href="https://www.jianshu.com/p/a804606ad8e9" target="_blank" rel="noopener">https://www.jianshu.com/p/a804606ad8e9</a></p><p>我的手机 2019/3/14 10:04:50<br><a href="https://www.cnblogs.com/chinabin1993/p/9115396.html" target="_blank" rel="noopener">https://www.cnblogs.com/chinabin1993/p/9115396.html</a></p><p>我的手机 2019/3/14 10:05:03<br><a href="https://segmentfault.com/a/1190000012996217" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012996217</a></p><p>我的手机 2019/3/14 10:05:20<br><a href="https://blog.csdn.net/qq_35430000/article/details/79291287" target="_blank" rel="noopener">https://blog.csdn.net/qq_35430000/article/details/79291287</a></p><p>我的手机 2019/3/14 10:05:37<br><a href="https://m.jb51.net/article/140581.htm" target="_blank" rel="noopener">https://m.jb51.net/article/140581.htm</a></p><p><a href="https://yukwan.cn/fronttech/front-end/" target="_blank" rel="noopener">https://yukwan.cn/fronttech/front-end/</a><br>2019/3/8 16:31:10<br>我的手机 2019/3/8 16:31:10<br><a href="https://mp.weixin.qq.com/s/L8P0RIXym4myfknzM5Nsog" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/L8P0RIXym4myfknzM5Nsog</a><br>2019/3/9 16:28:42<br>我的手机 2019/3/9 16:28:42<br><a href="https://campushr.hikvision.com/JobDetails.html?id=057c01652bb444b597345337c7b8c14f&amp;type=0" target="_blank" rel="noopener">https://campushr.hikvision.com/JobDetails.html?id=057c01652bb444b597345337c7b8c14f&amp;type=0</a></p><p><a href="https://wx2.sinaimg.cn/mw690/005NaMhPly1g0nayy8lbij30hs59p7wh.jpg?from=singlemessage" target="_blank" rel="noopener">https://wx2.sinaimg.cn/mw690/005NaMhPly1g0nayy8lbij30hs59p7wh.jpg?from=singlemessage</a></p><h3 id="2019-07-21"><a href="#2019-07-21" class="headerlink" title="2019-07-21"></a>2019-07-21</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">1. 说一下CSS盒模型</span><br><span class="line">标准盒模型和IE怪异盒模型，然后提到了设置 box-sizing 可以转换及一些常见应用场景（这题过）</span><br><span class="line">2. 怎样让一个元素水平垂直居中</span><br><span class="line">3. 知道什么是同源策略吗</span><br><span class="line">4. 那怎么解决跨域问题</span><br><span class="line">5. 知道 JSONP 原理吗</span><br><span class="line">6. 怎么检测浏览器中的内存泄漏</span><br><span class="line">7. 如果要让你给 chrome 写一个插件检测内存泄漏说一下你的思路</span><br><span class="line">8. 重绘和重排的区别</span><br><span class="line">9. 知道浏览器事件机制吗</span><br><span class="line">10. 从输入一个URL到页面加载完成发生了什么</span><br><span class="line">11. 计算机网络了解吗？OSI七层模型？选择一个比较熟悉的层，介绍一下有哪些协议</span><br><span class="line">12. DNS的运行过程，DNS性能优化有哪些方法</span><br><span class="line">13. 写代码：给一个淘宝的页面，写一下大概如何布局</span><br><span class="line">14. 写代码，DOM操作将所有页面元素存为一个&#123;key:count&#125;的结构，即统计在页面中每种元素的数量，将元素根据count进行排序。</span><br><span class="line">15. 垃圾回收机制</span><br><span class="line">16. https和http区别，对称加密和非对称加密区别</span><br><span class="line">17. http1.0和http1.1和http2.0</span><br><span class="line">18. CSS盒模型（box-sizing属性）</span><br><span class="line">19. 写代码：多维数组展为一维数组（如：[[1,2],3,[4,5,6],[7,8]]-&gt;[1,2,3,4,5,6,7,8]）</span><br><span class="line">20. 写代码：自己实现一个instanceof</span><br><span class="line">21. 对于原型链的理解，new的过程中发生了什么，写代码：自己实现一个new</span><br><span class="line">22. Vue双向绑定的原理</span><br><span class="line">23. Vue双向绑定的原理</span><br><span class="line">24. Vue组件间的通信</span><br><span class="line">25. CSS雪碧图是什么</span><br><span class="line">26. 重绘和重排，哪些属性会触发重绘，哪些属性会触发重排</span><br><span class="line">27. ES6中<span class="built_in">let</span>,const,var的区别</span><br><span class="line">28. map,forEach的区别</span><br><span class="line">29. 跨域有哪些方法</span><br><span class="line">30. 写代码：多维数组展开成一维数组，分析算法的时间复杂度，用es6的什么方法可以实现（flat）</span><br><span class="line">31. 写代码：数组去重有哪些方法</span><br><span class="line">32. 写代码：用闭包实现add()函数，第n次调用的时候输出n</span><br><span class="line">33. this的指向问题：</span><br><span class="line">var a=2; var obj=&#123; a:1, b:this.a, fun:<span class="function"><span class="title">function</span></span>()&#123; console.log(this.b); &#125; &#125;</span><br><span class="line">输出结果为2，分析原因</span><br><span class="line">34. 写代码：实现call函数</span><br><span class="line">35. TCP三次握手，为什么是三次</span><br><span class="line">36. http请求包括什么，http应答包括什么</span><br><span class="line">37. 了解哪些状态码</span><br><span class="line">38. 输入url到页面出现发生了什么</span><br><span class="line">39. 浏览器渲染机制</span><br><span class="line">40. 什么是同源策略（如何判断是否同源），CORS策略</span><br><span class="line">41. CSS实现三角形，箭头</span><br><span class="line">42. CSS垂直居中的方法</span><br><span class="line">43. CSRF和XSS是什么，如何预防</span><br><span class="line">44. localStorage和sessionStorage区别，localStorage最大存储量</span><br><span class="line">45. CORS机制</span><br><span class="line">46. Chrome调试断点如何设置</span><br><span class="line">47. TCP三次握手，为什么不是四次，为什么不是两次</span><br><span class="line">48. 浏览器渲染机制，js阻塞加载</span><br><span class="line">49. js动态加载，<span class="built_in">eval</span>()方法</span><br><span class="line">50. 写代码：请求一个require.js文件，并统计文件中<span class="string">'require'</span>的数量，分析时间复杂度，如何优化</span><br><span class="line">51. 为什么想做前端，平时如何学习前端，知不知道社区里有哪些大神，讲讲最近看的一些前端相关的知识</span><br><span class="line">52. 自己对前端未来发展方向是什么</span><br><span class="line">53. 如何实现一个轮播图效果</span><br><span class="line">54. CSS3新特性了解哪些</span><br><span class="line">55. js数组的方法、对象的方法</span><br><span class="line">56. Flex布局</span><br><span class="line">57. js闭包</span><br><span class="line">58. json是什么，为什么要用json</span><br><span class="line">59. ajax元素操作的步骤</span><br><span class="line">60. 数组排序的方法有哪些？说一下归并</span><br><span class="line">61. 数组深拷贝</span><br><span class="line">62. 从后端返回一个很大的数组，如何实现分页显示（通过数组下标进行对应）</span><br><span class="line">63. 如何实现一个下划线（和text-decoration里的underline不一样），答案：用box-shadow</span><br><span class="line">64. 单页应用有什么好处</span><br><span class="line">65. 如何判断一个链表是否有环</span><br><span class="line">66. 一个二叉树中找到两个节点的最小公共父节点</span><br><span class="line">67. js闭包是什么，什么是内存泄漏，如何解决内存泄漏问题</span><br><span class="line">68. js垃圾回收机制</span><br><span class="line">69. 原生ajax原理，ajax和fetch的区别，fetch支持http的哪些方法</span><br><span class="line">70. option方法可以发送那些内容</span><br><span class="line">71. CSS的display有哪些取值</span><br><span class="line">72. iso七层模型，每一层模型的经典协议</span><br><span class="line">73. es6新增的数组方法</span><br><span class="line">74. 数组的reduce方法</span><br><span class="line">75. js中找到一个数组最大值的方法，分析复杂度</span><br><span class="line">76. MVC和MVVM的区别，MVVM的优点</span><br><span class="line">77. flex布局用在哪些场景下</span><br><span class="line">78. 如何适配不同的屏幕</span><br><span class="line">79. HTTP状态码有哪些</span><br><span class="line">80. cookie,localStorage,sessionStorage的区别</span><br><span class="line">81. es6的<span class="built_in">let</span>,const和var区别，const绑定的对象能不能修改属性值</span><br><span class="line">82. Vue数组双向绑定的原理，数组中没有get和<span class="built_in">set</span>方法，应该如何实现数据劫持</span><br><span class="line">83. event-loop原理，宏任务，微任务有哪些</span><br><span class="line">84. 如何实现水平垂直居中（元素定长和不定长）</span><br><span class="line">85. position有哪些属性，有什么区别，除了定位上的不同还有什么区别</span><br><span class="line">86. Vue组件中的data为什么是函数</span><br><span class="line">87. Vue双向数据绑定的原理</span><br><span class="line">88. webpack怎么用，实现机制</span><br><span class="line">89. Vuex相关</span><br><span class="line">90. 一个网站图片很多，加载很慢，应该如何优化：DOMContentLoad,图片懒加载，CDN</span><br><span class="line">91. Vue的watch和computed区别</span><br><span class="line">92. CSS选择器优先级</span><br><span class="line">93. es5实现继承</span><br><span class="line">94. 一个页面加载不出来可能是那些方面的原因</span><br><span class="line">95. setTimeout和Promise的区别，如何实现Promise</span><br><span class="line">96. HTTP持续连接实现原理</span><br><span class="line">97. 了解哪些设计模式</span><br><span class="line">98. jQ选择器的实现原理</span><br><span class="line">99. Vue中虚拟DOM解决什么问题，原理？</span><br><span class="line">100. http协议是什么，请求和响应的构成，如何区分一个请求的头部和实体（中间有一个空行）</span><br><span class="line">101. http有哪些方法，为什么要有这些方法（语义化）</span><br><span class="line">102. 状态码3开头的有哪些，浏览器收到301和302怎么做，304用在哪些场景</span><br><span class="line">103. cookie相关，cookie用在什么场景，cookie有哪些性质</span><br><span class="line">104.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/07/10/%E5%89%8D%E7%AB%AF%E8%A7%84%E5%88%99/%E4%BB%A3%E7%A0%81%E8%A7%84%E5%88%99/"/>
    <id>http://yoursite.com/2019/07/10/前端规则/代码规则/</id>
    <published>2019-07-10T00:59:31.939Z</published>
    <updated>2019-07-10T01:58:05.076Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前端代码命名规则"><a href="#前端代码命名规则" class="headerlink" title="前端代码命名规则"></a>前端代码命名规则</h3><h4 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h4><ul><li>项目命名</li><li>目录/文件夹命名</li><li>JavaScript文件命名</li><li>css (scss、less、stylus)文件命名</li><li>html文件命名</li></ul><h4 id="HTML文件代码规范"><a href="#HTML文件代码规范" class="headerlink" title="HTML文件代码规范"></a>HTML文件代码规范</h4><ul><li>语法 （缩进，dom属性命名规范，单双引号的运用）</li><li>lang 属性</li><li>字符串编码</li><li>IE兼容模式</li><li>CSS 引入方式</li><li>JavaScript 文件引入顺序</li><li>避免 dom 标签嵌套的层级过多</li></ul><h4 id="CSS-文件代码规范"><a href="#CSS-文件代码规范" class="headerlink" title="CSS 文件代码规范"></a>CSS 文件代码规范</h4><ul><li>缩进</li><li>分号</li><li>空格</li><li>换行</li><li>注释方案</li><li>命名</li><li>媒体查询</li><li>….</li></ul><h4 id="JavaScript-文件代码规范"><a href="#JavaScript-文件代码规范" class="headerlink" title="JavaScript 文件代码规范"></a>JavaScript 文件代码规范</h4><ul><li>缩进、空格、换行、注释…</li><li>变量命名</li><li>函数引用</li><li>数组对象</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>事件循环与任务队列</title>
    <link href="http://yoursite.com/2019/04/22/JavaScript/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%8E%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2019/04/22/JavaScript/事件循环与任务队列/</id>
    <published>2019-04-22T02:52:17.000Z</published>
    <updated>2019-04-22T03:05:43.051Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><p><a href="https://juejin.im/post/5c8a024d51882546be0a3082" target="_blank" rel="noopener">从面试题看 JS 事件循环与 macro micro 任务队列</a></p><h3 id="事件轮询"><a href="#事件轮询" class="headerlink" title="事件轮询"></a>事件轮询</h3><p><strong>同步任务</strong> 指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；<br><strong>异步任务</strong> 指的是，不进入主线程、而进入”任务队列”（<code>task queue</code>）的任务，等待同步任务执行完毕之后，轮询执行异步任务队列中的任务<br><strong>macrotask队列</strong> 等同于我们常说的任务队列，macrotask是由宿主环境分发的异步任务，事件轮询的时候总是一个一个任务队列去查看执行的，”任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。<br><strong>microtask</strong> 即<code>微任务</code>，是由js引擎分发的任务，总是添加到当前任务队列末尾执行。另外在处理<code>microtask</code>期间，如果有新添加的<code>microtasks</code>，也会被添加到队列的末尾并执行。注意与<code>setTimeout(fn,0)</code>的区别：<br>　　<code>setTimeOut(fn(),0)</code> 指定某个任务在主线程最早可得的空闲时间执行，也就是说，尽可能早得执行。它在”任务队列”的尾部添加一个事件，因此要等到同步任务和”任务队列”现有的事件都处理完，才会得到执行。<br><strong>所以我们可以得到js执行顺序是：</strong></p><blockquote><p>开始 -&gt; 取第一个task queue里的任务执行(可以认为同步任务队列是第一个task queue) -&gt; 取 microtask 全部任务依次执行 -&gt; 取下一个task queue里的任务执行 -&gt; 再次取出microtask全部任务执行 -&gt; … 这样循环往复</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS&amp;&amp;AMD&amp;&amp;CMD</title>
    <link href="http://yoursite.com/2019/04/21/JavaScript/CommonJS&amp;&amp;AMD&amp;&amp;CMD/"/>
    <id>http://yoursite.com/2019/04/21/JavaScript/CommonJS&amp;&amp;AMD&amp;&amp;CMD/</id>
    <published>2019-04-21T12:57:06.000Z</published>
    <updated>2019-04-22T00:35:40.169Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><p><a href="https://juejin.im/post/5aaa37c8f265da23945f365c" target="_blank" rel="noopener">前端模块化：CommonJS,AMD,CMD,ES6</a><br><a href="https://juejin.im/post/5c17ad756fb9a049ff4e0a62#heading-2" target="_blank" rel="noopener">前端模块化详解(完整版)</a></p><h2 id="模块化的理解"><a href="#模块化的理解" class="headerlink" title="模块化的理解"></a>模块化的理解</h2><h3 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h3><p>　　将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起。<br>　　块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信。</p><h3 id="模块化的好处"><a href="#模块化的好处" class="headerlink" title="模块化的好处"></a>模块化的好处</h3><p>　　避免命名冲突(减少命名空间污染)<br>　　更好的分离, 按需加载<br>　　更高复用性<br>　　高可维护性</p><h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h2><h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>　　Node 应用由模块组成，采用 <code>CommonJS</code> 模块规范。每个文件就是一个模块，有自己的作用域。在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见。<strong>在服务器端，模块的加载是运行时同步加载的；在浏览器端，模块需要提前编译打包处理。</strong></p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>　　所有代码都运行在模块作用域，不会污染全局作用域。<br>　　模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。<br>　　模块加载的顺序，按照其在代码中出现的顺序。</p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>　　暴露模块：<code>module.exports = value</code>或<code>exports.xxx = value</code><br>　　引入模块：<code>require(xxx)</code>,如果是第三方模块，xxx为模块名；如果是自定义模块，xxx为模块文件路径</p><p>　　此处我们有个疑问：<strong>CommonJS暴露的模块到底是什么?</strong> CommonJS规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。<strong>加载某个模块，其实是加载该模块的module.exports属性。</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// example.js</span><br><span class="line">var x = 5;</span><br><span class="line">var addX = <span class="keyword">function</span> (value) &#123;</span><br><span class="line">  <span class="built_in">return</span> value + x;</span><br><span class="line">&#125;;</span><br><span class="line">module.exports.x = x;</span><br><span class="line">module.exports.addX = addX;</span><br></pre></td></tr></table></figure></p><p>上面代码通过<code>module.exports</code>输出变量x和函数addX。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//如果参数字符串以“./”开头，则表示加载的是一个位于相对路径</span><br><span class="line">var example = require(<span class="string">'./example.js'</span>);</span><br><span class="line">console.log(example.x); // 5</span><br><span class="line">console.log(example.addX(1)); // 6</span><br></pre></td></tr></table></figure></p><p>　　require命令用于加载模块文件。<strong>require命令的基本功能是，读入并执行一个JavaScript文件，然后返回该模块的exports对象。如果没有发现指定模块，会报错。</strong></p><h4 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h4><p>　　<strong>CommonJS模块的加载机制是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值</strong>。这点与ES6模块化有重大差异（下文会介绍），请看下面这个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// lib.js</span><br><span class="line">var counter = 3;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">incCounter</span></span>() &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  counter: counter,</span><br><span class="line">  incCounter: incCounter,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面代码输出内部变量counter和改写这个变量的内部方法incCounter。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// main.js</span><br><span class="line">var counter = require(<span class="string">'./lib'</span>).counter;</span><br><span class="line">var incCounter = require(<span class="string">'./lib'</span>).incCounter;</span><br><span class="line"></span><br><span class="line">console.log(counter);  // 3</span><br><span class="line">incCounter();</span><br><span class="line">console.log(counter); // 3</span><br></pre></td></tr></table></figure></p><p>　　上面代码说明，counter输出以后，lib.js模块内部的变化就影响不到counter了。<strong>这是因为counter是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。</strong></p><h3 id="AMD和require-js"><a href="#AMD和require-js" class="headerlink" title="AMD和require.js"></a>AMD和require.js</h3><p>　　AMD规范采用<code>异步方式加载模块</code>，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。这里介绍用<code>require.js</code>实现<code>AMD</code>规范的模块化：用<code>require.config()</code>指定引用路径等，用<code>define()</code>定义模块，用<code>require()</code>加载模块。<br>　　首先我们需要引入<code>require.js</code>文件和一个入口文件<code>main.js</code>。<code>main.js</code>中配置<code>require.config()</code>并规定项目中用到的基础模块。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/** 网页中引入require.js及main.js **/</span><br><span class="line">&lt;script src=<span class="string">"js/require.js"</span> data-main=<span class="string">"js/main"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">/** main.js 入口文件/主模块 **/</span><br><span class="line">// 首先用config()指定各模块路径和引用名</span><br><span class="line">require.config(&#123;</span><br><span class="line">  baseUrl: <span class="string">"js/lib"</span>,</span><br><span class="line">  paths: &#123;</span><br><span class="line">    <span class="string">"jquery"</span>: <span class="string">"jquery.min"</span>,  //实际路径为js/lib/jquery.min.js</span><br><span class="line">    <span class="string">"underscore"</span>: <span class="string">"underscore.min"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 执行基本操作</span><br><span class="line">require([<span class="string">"jquery"</span>,<span class="string">"underscore"</span>],<span class="keyword">function</span>($,_)&#123;</span><br><span class="line">  // some code here</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>　　引用模块的时候，我们将模块名放在<code>[]</code>中作为<code>reqiure()</code>的第一参数；如果我们定义的模块本身也依赖其他模块,那就需要将它们放在<code>[]</code>中作为<code>define()</code>的第一参数。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// 定义math.js模块</span><br><span class="line">define(<span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    var basicNum = 0;</span><br><span class="line">    var add = <span class="keyword">function</span> (x, y) &#123;</span><br><span class="line">        <span class="built_in">return</span> x + y;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        add: add,</span><br><span class="line">        basicNum :basicNum</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">// 定义一个依赖underscore.js的模块</span><br><span class="line">define([<span class="string">'underscore'</span>],<span class="keyword">function</span>(_)&#123;</span><br><span class="line">  var classify = <span class="keyword">function</span>(list)&#123;</span><br><span class="line">    _.countBy(list,<span class="keyword">function</span>(num)&#123;</span><br><span class="line">      <span class="built_in">return</span> num &gt; 30 ? <span class="string">'old'</span> : <span class="string">'young'</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">return</span> &#123;</span><br><span class="line">    classify :classify</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 引用模块，将模块放在[]内</span><br><span class="line">require([<span class="string">'jquery'</span>, <span class="string">'math'</span>],<span class="keyword">function</span>($, math)&#123;</span><br><span class="line">  var sum = math.add(10,20);</span><br><span class="line">  $(<span class="string">"#sum"</span>).html(sum);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>　　CMD规范专门用于浏览器端，<code>模块的加载是异步的</code>，模块使用时才会加载执行。CMD规范整合了CommonJS和AMD规范的特点。在 Sea.js 中，所有 JavaScript 模块都遵循 CMD模块定义规范。</p><h4 id="CMD规范基本语法"><a href="#CMD规范基本语法" class="headerlink" title="CMD规范基本语法"></a>CMD规范基本语法</h4><p>定义暴露模块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//定义没有依赖的模块</span><br><span class="line">define(<span class="keyword">function</span>(require, exports, module)&#123;</span><br><span class="line">  exports.xxx = value</span><br><span class="line">  module.exports = value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//定义有依赖的模块</span><br><span class="line">define(<span class="keyword">function</span>(require, exports, module)&#123;</span><br><span class="line">  //引入依赖模块(同步)</span><br><span class="line">  var module2 = require(<span class="string">'./module2'</span>)</span><br><span class="line">  //引入依赖模块(异步)</span><br><span class="line">    require.async(<span class="string">'./module3'</span>, <span class="keyword">function</span> (m3) &#123;</span><br><span class="line">    &#125;)</span><br><span class="line">  //暴露模块</span><br><span class="line">  exports.xxx = value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>引入使用模块：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="keyword">function</span> (require) &#123;</span><br><span class="line">  var m1 = require(<span class="string">'./module1'</span>)</span><br><span class="line">  var m4 = require(<span class="string">'./module4'</span>)</span><br><span class="line">  m1.show()</span><br><span class="line">  m4.show()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="CMD和sea-js"><a href="#CMD和sea-js" class="headerlink" title="CMD和sea.js"></a>CMD和sea.js</h3><p>　　require.js在申明依赖的模块时会在第一之间加载并执行模块内的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>], <span class="keyword">function</span>(a, b, c, d, e, f) &#123; </span><br><span class="line">    // 等于在最前面声明并初始化了要用到的所有模块</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">      // 即便没用到某个模块 b，但 b 还是提前执行了</span><br><span class="line">      b.foo()</span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>　　CMD是另一种js模块化方案，它与AMD很类似，不同点在于：<strong>AMD 推崇依赖前置、提前执行，CMD推崇依赖就近、延迟执行。此规范其实是在sea.js推广过程中产生的。</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/** AMD写法 **/</span><br><span class="line">define([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>], <span class="keyword">function</span>(a, b, c, d, e, f) &#123; </span><br><span class="line">     // 等于在最前面声明并初始化了要用到的所有模块</span><br><span class="line">    a.doSomething();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        // 即便没用到某个模块 b，但 b 还是提前执行了</span><br><span class="line">        b.doSomething()</span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/** CMD写法 **/</span><br><span class="line">define(<span class="keyword">function</span>(require, exports, module) &#123;</span><br><span class="line">    var a = require(<span class="string">'./a'</span>); //在需要时申明</span><br><span class="line">    a.doSomething();</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        var b = require(<span class="string">'./b'</span>);</span><br><span class="line">        b.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/** sea.js **/</span><br><span class="line">// 定义模块 math.js</span><br><span class="line">define(<span class="keyword">function</span>(require, exports, module) &#123;</span><br><span class="line">    var $ = require(<span class="string">'jquery.js'</span>);</span><br><span class="line">    var add = <span class="keyword">function</span>(a,b)&#123;</span><br><span class="line">        <span class="built_in">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    exports.add = add;</span><br><span class="line">&#125;);</span><br><span class="line">// 加载模块</span><br><span class="line">seajs.use([<span class="string">'math.js'</span>], <span class="keyword">function</span>(math)&#123;</span><br><span class="line">    var sum = math.add(1+2);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="ES6-Module"><a href="#ES6-Module" class="headerlink" title="ES6 Module"></a>ES6 Module</h3><p>　　ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，旨在成为浏览器和服务器通用的模块解决方案。其模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/** 定义模块 math.js **/</span><br><span class="line">var basicNum = 0;</span><br><span class="line">var add = <span class="keyword">function</span> (a, b) &#123;</span><br><span class="line">    <span class="built_in">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">export</span> &#123; basicNum, add &#125;;</span><br><span class="line"></span><br><span class="line">/** 引用模块 **/</span><br><span class="line">import &#123; basicNum, add &#125; from <span class="string">'./math'</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="built_in">test</span>(ele) &#123;</span><br><span class="line">    ele.textContent = add(99 + basicNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　如上例所示，使用<code>import</code>命令的时候，用户需要知道所要加载的变量名或函数名。其实<code>ES6</code>还提供了<code>exportdefault</code>命令，为模块指定默认输出，对应的<code>import</code>语句不需要使用大括号。这也更趋近于<code>ADM</code>的引用写法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/** <span class="built_in">export</span> default **/</span><br><span class="line">//定义输出</span><br><span class="line"><span class="built_in">export</span> default &#123; basicNum, add &#125;;</span><br><span class="line">//引入</span><br><span class="line">import math from <span class="string">'./math'</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="built_in">test</span>(ele) &#123;</span><br><span class="line">    ele.textContent = math.add(99 + math.basicNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　ES6的模块不是对象，import命令会被 JavaScript 引擎静态分析，在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。也正因为这个，使得静态分析成为可能。</p><h3 id="ES6-模块与-CommonJS-模块的差异"><a href="#ES6-模块与-CommonJS-模块的差异" class="headerlink" title="ES6 模块与 CommonJS 模块的差异"></a>ES6 模块与 CommonJS 模块的差异</h3><h4 id="CommonJS-模块输出的是一个值的拷贝，ES6-模块输出的是值的引用。"><a href="#CommonJS-模块输出的是一个值的拷贝，ES6-模块输出的是值的引用。" class="headerlink" title="CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。"></a>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</h4><p>　　CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。<br>　　ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的import有点像 Unix 系统的“符号连接”，原始值变了，import加载的值也会跟着变。因此，<strong>ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// lib.js</span><br><span class="line"><span class="built_in">export</span> <span class="built_in">let</span> counter = 3;</span><br><span class="line"><span class="built_in">export</span> <span class="keyword">function</span> <span class="function"><span class="title">incCounter</span></span>() &#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line">// main.js</span><br><span class="line">import &#123; counter, incCounter &#125; from <span class="string">'./lib'</span>;</span><br><span class="line">console.log(counter); // 3</span><br><span class="line">incCounter();</span><br><span class="line">console.log(counter); // 4</span><br></pre></td></tr></table></figure></p><h4 id="CommonJS-模块是运行时加载，ES6-模块是编译时输出接口。"><a href="#CommonJS-模块是运行时加载，ES6-模块是编译时输出接口。" class="headerlink" title="CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。"></a>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</h4><p>　　运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。<br>　　编译时加载: ES6 模块不是对象，而是通过 export 命令显式指定输出的代码，import时采用静态命令的形式。即在import时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。<br>　　CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　CommonJS规范主要用于服务端编程，加载模块是同步的，这并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD CMD解决方案。<br>　　AMD规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD规范开发成本高，代码的阅读和书写比较困难，模块定义方式的语义不顺畅。<br>　　CMD规范与AMD规范很相似，都用于浏览器编程，依赖就近，延迟执行，可以很容易在Node.js中运行。不过，依赖SPM 打包，模块的加载逻辑偏重<br>　　ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>项目的总结</title>
    <link href="http://yoursite.com/2019/04/21/Project/Backstage/"/>
    <id>http://yoursite.com/2019/04/21/Project/Backstage/</id>
    <published>2019-04-21T10:50:06.000Z</published>
    <updated>2019-04-21T12:37:25.921Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><p>项目名： 森尚宅配全屋定制流程控制系统<br>项目地址： <a href="https://github.com/aLittleLittleStar/Backstage" target="_blank" rel="noopener">https://github.com/aLittleLittleStar/Backstage</a><br>项目技术：<br>Asp.net<br>MySQL8.0.13<br>JQuery2.2.4<br>BootStarp3.3.7<br>负责功能：<br>前端页面的设计与编写<br>登录交互功能的编写<br>（如何根据不同的用户权限对内容页面的展示进行修改。解决方法使用localStrong把用户类别放到本地前端读取之后进行相对应页面的显示和隐藏），<br>时间组件bootstrap-datetimepicker的使用<br>页面的布局 flex布局<br>iframe 的使用： 点击侧边栏菜单内容页面进行相应的切换<br>项目的难点：<br>登录功能的实现</p><p>Travel去哪儿网<br>项目地址： <a href="https://github.com/aLittleLittleStar/Travel" target="_blank" rel="noopener">https://github.com/aLittleLittleStar/Travel</a><br>项目技术：<br>node10.5.0<br>npm 3.0.0<br>axios 0.18.0<br>better-scroll 6.26.0<br>faskclick 1.0.6<br>stylus 0.54.5<br>vue 2.5.2<br>vue-router 3.0.1<br>vuex 3.0.1<br>ESLint 4.15.0<br>webpack 3.6.0</p><p>负责功能：页面的设计，功能分析，编译打包<br>数据的传递共享（vuex）<br>项目的难点：<br>解决一像素边框问题 fastclick<br>使用ajax获取数据</p><p>刷新页面是轮播图无法显示第一页<br>解决方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;swiper :options=&quot;swiperOption&quot; v-if=&quot;showSwiper&quot;&gt;</span><br><span class="line">&lt;!-- 计算属性：计算list数组长度，刚开始没有加载数据所以数组长度为0，v-if为false页面不显示 --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        showSwiper () &#123;</span><br><span class="line">            return this.list.length</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="项目总结" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>编程风格</title>
    <link href="http://yoursite.com/2019/04/17/JavaScript/%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC/"/>
    <id>http://yoursite.com/2019/04/17/JavaScript/编程风格/</id>
    <published>2019-04-17T12:42:01.000Z</published>
    <updated>2019-04-19T11:13:42.566Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><p>块级作用域<br>字符串<br>解构赋值<br>对象<br>数组<br>函数<br>Map函数<br>Class<br>模板<br>ESLint 使用</p><h3 id="正则："><a href="#正则：" class="headerlink" title="正则："></a>正则：</h3><h4 id="两种模糊匹配"><a href="#两种模糊匹配" class="headerlink" title="两种模糊匹配"></a>两种模糊匹配</h4><h5 id="横向模糊匹配"><a href="#横向模糊匹配" class="headerlink" title="横向模糊匹配"></a>横向模糊匹配</h5><p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。<br>{m,n}，表示连续出现最少m次，最多n次。<br>比如/ab{2,5}c/表示匹配这样一个字符串：第一个字符是“a”，接下来是2到5个字符“b”，最后是字符“c”。</p><h5 id="纵向模糊匹配"><a href="#纵向模糊匹配" class="headerlink" title="纵向模糊匹配"></a>纵向模糊匹配</h5><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><h4 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h4><h4 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h4>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>蘑菇街面试准备</title>
    <link href="http://yoursite.com/2019/04/15/JavaScript/%E8%98%91%E8%8F%87%E8%A1%97%E9%9D%A2%E8%AF%95%E9%A2%98%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/04/15/JavaScript/蘑菇街面试题详解/</id>
    <published>2019-04-15T11:05:41.000Z</published>
    <updated>2019-04-22T13:03:58.545Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><p>const<br>let  var 之间的区别<br>4、es6中的const解释解释<br>9.em和rem区别<br>3.js部分，const，let和 var 的区别。<br>4.js部分，数组遍历map和forEach的区别。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">能用forEach()做到的，map()同样可以。反过来也是如此。</span><br><span class="line">map()会分配内存空间存储新数组并返回，forEach()不会返回数据。</span><br><span class="line">forEach()允许callback更改原始数组的元素。map()返回新的数组。</span><br></pre></td></tr></table></figure></p><p>5.css部分，em和rem怎么做自适应。<br>8.函数提升和变量提升优先级<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">函数提升 优于变量</span><br><span class="line">解析器在向执行环境中加载数据时会率先读取函数声明，并使其在执行任何代码之前可用(可访问)，即函数声明提升、JavaScript上卷中第40页提到函数声明是优于变量提升的。可见代码</span><br><span class="line">console.log(getName)</span><br><span class="line">var getName = 1;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getName</span></span>() &#123;</span><br><span class="line">  console.log(2)</span><br><span class="line">&#125;</span><br><span class="line">// 输出为函数getName</span><br><span class="line">注意:不要学了一点就忘记别的了啊，如果两个函数名一样，后面的会覆盖前面的(认为是在函数解析的时候覆盖，即提升的时候就覆盖了)</span><br></pre></td></tr></table></figure></p><p>JS深拷贝的用处，哪里会用到？</p><blockquote><p>浅拷贝<br>深拷贝 </p></blockquote><p>7、闭包以及带来问题<br>闭包知道吗？它可能出现的问题呢<br>10、css有哪些布局（一开始理解错了说了一大堆，后来面试官带回来了，是关于position、float）<br>11、flex实现水平垂直居中<br>12、align-items:center是不是只针对垂直<br>css布局都用过啥，flex布局，想让我说flex布局的原理的。。。想想还是算了，感觉面试官对原理情有独钟<br>CSS布局技巧<br>跨域的几种方式，有答jsonp，然后又问了 jsonp 的原理是啥？<br>6.跨域问题<br>6.常用的跨域方式。<br>项目有没跨域问题<br>5.作用域链<br><a href="https://juejin.im/post/58ed9c0ea0bb9f006a4c28cd" target="_blank" rel="noopener">JavaScript深入之作用域链</a><br><a href="https://juejin.im/post/5c8290455188257e5d0ec64f" target="_blank" rel="noopener">深入理解JavaScript作用域和作用域链</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">作用域链，是由当前环境与上层环境的一系列变量对象组成，</span><br><span class="line">它保证了当前执行环境对符合访问权限的变量和函数的有序访问。</span><br><span class="line"></span><br><span class="line">当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，</span><br><span class="line">就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到</span><br><span class="line">全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对</span><br><span class="line">象构成的链表就叫做作用域链。</span><br></pre></td></tr></table></figure></p><p>第一个问题是讲一下原型链，这个我先推了一下，讲了个小插曲，promise的状态和蘑菇街面试的状态吻合，只有pending、resolved、rejected三种状态，算是个破冰吧，今天看promise想到的。<br>然后继续回答原型链。</p><p>2、Promise了解多少<br><a href="https://juejin.im/post/5b32f552f265da59991155f0" target="_blank" rel="noopener"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Promise 是异步编程的一种解决方案：</span><br><span class="line">从语法上讲，promise是一个对象，从它可以获取异步操作的消息；</span><br><span class="line">从本意上讲，它是承诺，承诺它过一段时间会给你一个结果。</span><br><span class="line">promise有三种状态：pending(等待态)，fulfiled(成功态)，rejected(失败态)；</span><br><span class="line">状态一旦改变，就不会再变。创造promise实例后，它会立即执行。</span><br><span class="line"></span><br><span class="line">pending，异步任务正在进行。</span><br><span class="line">resolved (也可以叫fulfilled)，异步任务执行成功。</span><br><span class="line">rejected，异步任务执行失败。</span><br><span class="line"></span><br><span class="line">回调地狱，代码难以维护， 常常第一个的函数的输出是第二个函数的输入这种现象</span><br><span class="line">promise可以支持多个并发的请求，获取并发请求中的数据</span><br><span class="line">这个promise可以解决异步的问题，本身不能说promise是异步的</span><br><span class="line"></span><br><span class="line">Promise.resolve(value)</span><br><span class="line">类方法，该方法返回一个以 value 值解析后的 Promise 对象</span><br><span class="line">1、如果这个值是个 thenable（即带有 <span class="keyword">then</span> 方法），返回的 Promise </span><br><span class="line">对象会“跟随”这个 thenable 的对象，采用它的最终状态</span><br><span class="line">（指 resolved/rejected/pending/settled）</span><br><span class="line">2、如果传入的 value 本身就是 Promise 对象，</span><br><span class="line">  则该对象作为 Promise.resolve 方法的返回值返回。</span><br><span class="line">3、其他情况以该值为成功状态返回一个 Promise 对象。</span><br><span class="line"></span><br><span class="line">Promise.all的用法：谁跑的慢，以谁为准执行回调。</span><br><span class="line">  all接收一个数组参数，里面的值最终都算返回Promise对象</span><br><span class="line">  all方法可以说是Promise中很常用的方法了，它的作用就是将一个数组的Promise对象放在其中，当全部resolve的时候就会执行<span class="keyword">then</span>方法，当有一个reject的时候就会执行catch，并且他们的结果也是按着数组中的顺序来排放的，那么我们来实现一下。</span><br><span class="line">Promise.race的用法：谁跑的快，以谁为准执行回调</span><br><span class="line">它的作用是将一个Promise数组放入race中，哪个先执行完，race就直接执行完，并从<span class="keyword">then</span>中取值。</span><br><span class="line">Promise.prototype.catch</span><br><span class="line">  实例方法，捕获异常，函数形式：fn(err)&#123;&#125;, err 是 catch 注册 之前的回调抛出的异常信息。</span><br><span class="line">Promise.prototype.then</span><br><span class="line">  实例方法，为 Promise 注册回调函数，函数形式：fn(vlaue)&#123;&#125;，value 是上一个任务的返回结果，<span class="keyword">then</span> 中的函数一定要 <span class="built_in">return</span> 一个结果或者一个新的 Promise 对象，才可以让之后的<span class="keyword">then</span> 回调接收。</span><br><span class="line">Promise.reject</span><br><span class="line">类方法，且与 resolve 唯一的不同是，返回的 promise 对象的状态为 rejected。</span><br><span class="line"></span><br><span class="line">Promise的立即执行性</span><br><span class="line">Promise 三种状态</span><br><span class="line">Promise 状态的不可逆性</span><br><span class="line"><span class="keyword">then</span>方法链式调用</span><br><span class="line"></span><br><span class="line">async/await</span><br></pre></td></tr></table></figure></p><p>promise有了解吗<br>Promise.all promise.race 有了解吗（当时一直听成Promise.out ，我就纳闷了说哪儿来的这个方法。。）</p><p>3.React 生命周期，如果要合并 props 和 state 在哪进行<br>4.React 组件想用函数调用的方式使用，怎么设计<br>react如果更新了父组件，子组件没有更新，会都重新渲染吗？<br>react的原理，他的内部是怎么构建DOM的，比如p标签的子元素放在哪个属性里。。。没看过源码着实不知道<br>react相关的redux的原理？<br>7.你印象比较深的项目或者代码<br>我觉得是像 antd 里面的 message 模块，使用 ReactDOM.render<br>挂载组件到指定节点，然后通过更新 props 使用<br>html css js擅长哪部分？<br>我回答擅长js，但他居然没有继续问下去了</p><p>3、es5和es6了解多少<br>es5,es6哪个用的多点？<br>3、es5和es6了解多少<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">变量声明：<span class="built_in">let</span> const</span><br><span class="line">字符串模板</span><br><span class="line">解构赋值 对象对对象 数组对数组</span><br><span class="line">扩展运算符</span><br><span class="line">箭头函数</span><br><span class="line">  不需要 <span class="keyword">function</span> 关键字来创建函数</span><br><span class="line">  省略 <span class="built_in">return</span> 关键字</span><br><span class="line">  继承当前上下文的 this 关键字</span><br><span class="line">import导入模块、<span class="built_in">export</span>导出模块</span><br><span class="line">Promise</span><br><span class="line">数组常用方法：</span><br><span class="line">Array.isArray</span><br><span class="line">map</span><br><span class="line">filter</span><br><span class="line">forEach</span><br><span class="line">every</span><br><span class="line">reduce</span><br><span class="line">splice</span><br><span class="line">indexOf</span><br><span class="line">slice</span><br><span class="line">concat</span><br><span class="line">reverse()</span><br><span class="line">join()</span><br><span class="line"></span><br><span class="line">Array.from()</span><br><span class="line">Array.of()</span><br><span class="line">copyWitch</span><br><span class="line">find</span><br><span class="line">findIndex</span><br><span class="line">keys()</span><br><span class="line">values()</span><br><span class="line">class 静态、私有、共有</span><br><span class="line"></span><br><span class="line">生成器（ generator）是能返回一个迭代器的函数。</span><br><span class="line">生成器函数也是一种函数，最直观的表现就是比普通的<span class="keyword">function</span>多了个星号*，</span><br><span class="line">在其函数体内可以使用yield关键字,有意思的是函数会在每个yield后暂停。</span><br><span class="line"></span><br><span class="line">可以暂停并重新开始执行的函数</span><br><span class="line"></span><br><span class="line">generators 可以扮演三种角色</span><br><span class="line">  迭代器(数据生产者)</span><br><span class="line">  观察者(数据消费者)</span><br><span class="line">  协作程序(数据生产者和消费者)</span><br></pre></td></tr></table></figure></p><p><a href="https://segmentfault.com/a/1190000012358863" target="_blank" rel="noopener">es6 Generators详解</a></p><p>2.CSS sprite(雪碧图或者精灵图)<br><a href="https://www.cnblogs.com/evenyao/p/9262371.html" target="_blank" rel="noopener">CSS Sprite “精灵图”</a><br><a href="https://blog.csdn.net/CamilleZJ/article/details/80406645" target="_blank" rel="noopener">CSS Sprite雪碧图</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">用CSS的<span class="string">"background-image"</span>，<span class="string">"background-repeat"</span>，<span class="string">"background-position"</span></span><br><span class="line">的组合进行背景定位，background-position可以用数字精确的定位出背景图片的位置。</span><br><span class="line">CSS Sprites 的优点：</span><br><span class="line">减少图片字节</span><br><span class="line">减少网页HTTP请求，提高网页性能</span><br><span class="line">减少命名难的问题</span><br><span class="line">缺点</span><br><span class="line">图片合并的时候要把图片合理的合并成一张图片，防止板块内出现不必要的背景</span><br><span class="line">在高分辨率下的自适应如果图片宽度不够，容易造成背景断裂</span><br><span class="line">维护的时候比较困难，如果背景图有少许改动，需要改动合并图片。</span><br></pre></td></tr></table></figure></p><p>事件节流？刚看过，没印象了，哭。<br>情景题，往下滚动，加载更多，有什么优化方案，图片懒加载？提示了可以滚轮事件是个比较频繁的操作，但是还是没想出来。防抖</p><p>vue和react差别，<br>8、问了vue有没有做过项目，然后就没有了<br>1.vue生命周期，没有问详细的，就是顺着生命周期说了一遍。英文捉急。<br>2.vue源码部分，几个重要的部分，compile，数据劫持，依赖收集，虚拟DOM。<br>问了一个异步加载组件，不用标签引入的方法。<br>让你实现vue你怎么实现……<br>说说vue的双向绑定（顺带把响应式说了）<br>说说Vue的diff过程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">如果不了解virtual dom，要理解diff的过程是比较困难的。虚拟dom对应的是真实dom， 使用document.CreateElement 和 document.CreateTextNode创建的就是真实节点。</span><br><span class="line"></span><br><span class="line">我们先根据真实DOM生成一颗virtual DOM，当virtual DOM某个节点的数据改变后会生成一个新的Vnode，然后Vnode和oldVnode作对比，发现有不一样的地方就直接修改在真实的DOM上，然后使oldVnode的值为Vnode。</span><br><span class="line">diff的过程就是调用名为patch的函数，比较新旧节点，一边比较一边给真实的DOM打补丁。</span><br><span class="line"></span><br><span class="line">在采取diff算法比较新旧节点的时候，比较只会在同层级进行, 不会跨层级比较。</span><br><span class="line">diff流程图</span><br><span class="line">当数据发生改变时，<span class="built_in">set</span>方法会让调用Dep.notify通知所有订阅者Watcher，</span><br><span class="line">订阅者就会调用patch给真实的DOM打补丁，更新相应的视图。</span><br><span class="line"></span><br><span class="line">patch函数接收两个参数oldVnode和Vnode分别代表新的节点和之前的旧节点</span><br><span class="line">判断两节点是否值得比较，值得比较则执行patchVnode</span><br><span class="line">不值得比较则用Vnode替换oldVnode</span><br><span class="line">如果两个节点都是一样的，那么就深入检查他们的子节点。如果两个节点不一样那就说明Vnode完全被改变了，就可以直接替换oldVnode。</span><br><span class="line"></span><br><span class="line">当我们确定两个节点值得比较之后我们会对两个节点指定patchVnode方法</span><br><span class="line">这个函数做了以下事情：</span><br><span class="line">  找到对应的真实dom，称为el</span><br><span class="line">  判断Vnode和oldVnode是否指向同一个对象，如果是，那么直接<span class="built_in">return</span></span><br><span class="line">  如果他们都有文本节点并且不相等，那么将el的文本节点设置为Vnode的文本节点。</span><br><span class="line">  如果oldVnode有子节点而Vnode没有，则删除el的子节点</span><br><span class="line">  如果oldVnode没有子节点而Vnode有，则将Vnode的子节点真实化之后添加到el</span><br><span class="line">  如果两者都有子节点，则执行updateChildren函数比较子节点，这一步很重要</span><br><span class="line">updateChildren</span><br><span class="line">先说一下这个函数做了什么</span><br><span class="line">  将Vnode的子节点Vch和oldVnode的子节点oldCh提取出来</span><br><span class="line">  oldCh和vCh各有两个头尾的变量StartIdx和EndIdx，它们的2个变量相互比较，一共有4种比较方式。如果4种比较都没匹配，如果设置了key，就会用key进行比较，在比较的过程中，变量会往中间靠，一旦StartIdx&gt;EndIdx表明oldCh和vCh至少有一个已经遍历完了，就会结束比较。</span><br></pre></td></tr></table></figure></p><p>v-model，v-bind 和v-click<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">v-bind  动态地绑定一个或多个特性、或一个组件 prop 到表达式。</span><br><span class="line">1:v-bind动态绑定指令，默认情况下标签自带属性的值是固定的，</span><br><span class="line">在为了能够动态的给这些属性添加值，可以使用v-bind:你要动态变化的值=<span class="string">"表达式"</span></span><br><span class="line"></span><br><span class="line">v-model 在表单控件或者组件上创建双向绑定。</span><br><span class="line">v-on 指令用于监听DOM事件 形式如：v-on:click  缩写为 @click;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[VUE中的v-if与v-show](http://www.cnblogs.com/wmhuang/p/5420344.html)</span><br><span class="line">手段：v-if是动态的向DOM树内添加或者删除DOM元素；</span><br><span class="line">v-show是通过设置DOM元素的display样式属性控制显隐；</span><br><span class="line">编译过程</span><br><span class="line">：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；</span><br><span class="line">v-show只是简单的基于css切换；</span><br><span class="line">编译条件：</span><br><span class="line">v-if是惰性的，如果初始条件为假，则什么也不做；</span><br><span class="line">只有在条件第一次变为真时才开始局部编译(编译被缓存？编译被缓存后，然后再切换的时候进行局部卸载)</span><br><span class="line">v-if是动态的向DOM树内添加或者删除DOM元素；</span><br><span class="line">v-show是通过设置DOM元素的display样式属性控制显隐；</span><br><span class="line">v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素保留；</span><br><span class="line">性能消耗：</span><br><span class="line">v-if有更高的切换消耗；v-show有更高的初始渲染消耗；</span><br><span class="line">使用场景：</span><br><span class="line">v-if适合运营条件不大可能改变；v-show适合频繁切换。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v-if 是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</span><br><span class="line">v-if 也是惰性的：</span><br><span class="line">如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</span><br><span class="line">相比之下，v-show 就简单得多——不管初始条件是什么，</span><br><span class="line">元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</span><br><span class="line">一般来说， v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；</span><br><span class="line">如果在运行时条件不太可能改变，则使用 v-if 较好。</span><br></pre></td></tr></table></figure></p><p>function a(){}，a的<strong>proto</strong> 指向哪，Function呢？Object呢？<br>js异步都有哪些？答了onclick之类的、setTimeout/setInterval/requestAnimation、Generator、promise、async/await，讲了promise和async/await的优缺点。</p><p>1.就我这次面试表现而言，有哪方面需要提升或者欠缺的<br>3.团队技术栈？<br>然后项目……照着你简历上的问，<br>技术选型，遇到的困难，解决思路，</p><p>面试中印象最深的问题<br>场面试官自己先介绍了三分钟..然后让我也介绍一下基本情况，项目经历难点之类的。<br>然后开始面试，很少技术问题<br>项目难点，如何解决的<br>有没有想过进入一个团队实习之后会有哪些压力大的事情？<br>有没有了解前端的新技术<br>有没有参加线下前端活动<br>会去看哪些博客或者社区<br>CSS动画和JS动画。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> (1)浏览器可以对动画进行优化。</span><br><span class="line">  1、 浏览器使用与 requestAnimationFrame 类似的机制，requestAnimationFrame比起setTimeout，setInterval设置动画的优势主要是:1)requestAnimationFrame 会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成,并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率,一般来说,这个频率为每秒60帧。2)在隐藏或不可见的元素中requestAnimationFrame不会进行重绘或回流，这当然就意味着更少的的cpu，gpu和内存使用量。</span><br><span class="line">  2、强制使用硬件加速 （通过 GPU 来提高动画性能）</span><br><span class="line">  (2)代码相对简单,性能调优方向固定</span><br><span class="line">  (3)对于帧速表现不好的低版本浏览器，CSS3可以做到自然降级，而JS则需要撰写额外代码</span><br><span class="line">缺点：</span><br><span class="line">　　1、 运行过程控制较弱,无法附加事件绑定回调函数。CSS动画只能暂停,不能在动画中寻找一个特定的时间点，不能在半路反转动画，不能变换时间尺度，不能在特定的位置添加回调函数或是绑定回放事件,无进度报告</span><br><span class="line"> 　  2、  代码冗长。想用 CSS 实现稍微复杂一点动画,最后CSS代码都会变得非常笨重。</span><br><span class="line"></span><br><span class="line">JavaScript</span><br><span class="line">  (1)JavaScript动画控制能力很强, 可以在动画播放过程中对动画进行控制：开始、暂停、回放、终止、取消都是可以做到的。</span><br><span class="line">  (2)动画效果比css3动画丰富,有些动画效果，比如曲线运动,冲击闪烁,视差滚动效果，只有JavaScript动画才能完成</span><br><span class="line">  (3)CSS3有兼容性问题，而JS大多时候没有兼容性问题</span><br><span class="line">缺点：</span><br><span class="line">　　　(1)JavaScript在浏览器的主线程中运行，而主线程中还有其它需要运行的JavaScript脚本、样式计算、布局、绘制任务等,对其干扰导致线程可能出现阻塞，从而造成丢帧的情况。</span><br><span class="line">  (2)代码的复杂度高于CSS动画</span><br></pre></td></tr></table></figure></p><p>后来说问点有难度的问题的吧。直接怼了好多原理。。。卡了好几下<br>webpack的打包目录为啥是这样的，知道原理吗？<br>大概目前只能想到这些了，最后问了面试官几个问题，面试官说有结果，顿了一下，通过或者不通过hr都会通知你的emmm，感觉有点凉，主要是原理着实卡了好几个地方，不过自我感觉面试官人还是很nice的，没有太难为我，看面相是个忠厚老实的小哥哥emmm，求offer啊啊啊啊啊啊啊啊啊啊啊啊<br>7.项目印象深刻的部分和难点。<br>二面我就不写面经了，就是问了些项目上的问题，解决问题的思路，技术栈，基本情况<br>自我介绍<br>项目介绍<br>你说的你的项目里有个首屏加载特别慢的问题对吧？能说说怎么优化的吗？<br>一个骰子，5个面，你怎么实现它（一个面你怎么布局）<br>说说事件循环<br>假如有个项目加载最开始特别快，后面越来越慢你知道是为什么吗？以及如何第一时间定位（内存泄漏）<br>1、自我介绍 + 项目介绍（难点）<br>5、事件委托<br>6、任务队列<br>9、一个场景题（关于使用调试工具的）<br>13、bootstrap中的栅格式<br>一面我上来就说的微信小程序，然后后边面试官几乎都没问别的（倒是考我几个问题啊，js css啥都不问，得嘞，白准备了），然后说到Vue，说了个v-model感觉不是很满意，自己也觉得虽然自己懂原理，但是没讲清楚。。。整个流程10来分钟，估计gg了</p><p>重绘&amp;&amp;回流<br>vue differ<br>vue 生命周期<br>跨域<br>自我介绍</p><p>JavaScript 怎么实现 OOP<br>原型继承与类继承的区别<br>闭包的应用场景<br>关系完整性约束</p><p>Cookie &amp; Session 的区别<br>Session 的实现原理<br>HTTP 请求方法中哪些是幂等性的<br>跨域处理方案<br>JSONP 的缺点以及安全隐患<br>为什么要做单元测试<br>黑盒测试与白盒测试的区别<br>怎样实现测试覆盖率<br>Async &amp; Await 的使用</p><p>块级元素、行内元素、inline-block 的区别<br>水平居中的方法<br>String、Array 常用的方法<br>输入一个 URL 到呈现页面的过程<br>Vue.js 组件的生命周期<br>Git 怎么合并提交记录<br>Linux 常用的命令<br>HTTP2 新特性</p><p>常见的 Web 攻击手段以及防范措施<br>对 Ajax 的理解<br>对闭包的理解<br>对事件机制的理解<br>对 HTTP 的理解<br>GET &amp; POST 的区别<br>HTTP2 和 HTTP1 有什么不同<br>对 JavaScript 各大框架的理解<br>对 jQuery 的理解<br>页面性能优化<br>计算机网络分层<br>输入 <a href="http://www.qq.com" target="_blank" rel="noopener">www.qq.com</a> 到呈现页面的过程<br>事件机制（W3C 标准）<br>事件代理<br>XSS、CSRF 的防范<br>token 的实现原理<br>熟练使用JS实现Json、XML格式的数据发送与数据解析；<br>3、熟悉各种web标准，了解各主流浏览器特性，使页面兼容主浏览器；</p><p>自我介绍<br>事件流<br>vue nextTick原理<br>vue react区别<br>web优化<br>移动端的优化有特别了解过吗<br>css flex了解过吗<br>如何前端监控错误，<br>koa有学过吗<br>事件循环说一说<br>web新技术了解过哪些，最近有去学习哪些东西<br>PWA你能详细说说吗<br>service worker<br>h5 worker<br>非受控组件 与受控组件<br>const let var区别<br>三道题<br>有自己写过webpack插件吗<br>webpack loader 和plugin区别<br>实现promise<br>大数相加<br>纯js写一个动画，5s由快到慢，速度自定义<br>（这里特别感谢以前发过面筋的同学，前两道题因为碰到过，自己下去做了一下 10多分钟给做完了 然后又让我补了一道= =）<br>自我介绍，说一下怎么学习前端的，以及做的项目的亮点<br>web优化<br>缓存（协商，强制说一说）<br>CDN<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CDN的全称是Content Delivery Network，即内容分发网络。</span><br><span class="line">其基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，</span><br><span class="line">使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联</span><br><span class="line">网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、</span><br><span class="line">负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近</span><br><span class="line">的服务节点上。</span><br><span class="line"></span><br><span class="line">其目的是使用户可就近取得所需内容，解决Internet网络拥挤的状况，</span><br><span class="line">提高用户访问网站的响应速度。</span><br><span class="line">降低核心系统负载 加速用户访问</span><br><span class="line">CDN做了两件事，一是让用户访问最近的节点，二是从缓存或者源站获取资源</span><br></pre></td></tr></table></figure></p><p>DNS如何查询域名的<br>node中间件原理<br>跨域<br>作用域<br>一个页面白屏，分析原因<br>数据结构链表<br>怎么判断链表有环（当时还问我是不是刷了很多题，我们都笑了笑）<br>cookie了解吗<br>cookie的属性，怎么存储<br>web安全，xss csrf<br>css响应式布局<br>token生成过程<br>前端新技术<br>PWA讲一讲<br>serviceworker<br>h5 worker<br>智商题<br>3.45分夹角<br>两个火车相对而行，知道彼此的速度，中间有一个小鸟来回飞 知道小鸟的速度 求相撞的时候的 小鸟飞行的距离<br>10瓶药，每瓶药有10颗药片，每片10克，其中一瓶药里的所有药片是坏的 每片重量为11克，现在给你一个秤，如何一次性称出来</p><p>三面<br>自我介绍<br>web优化<br>css动画<br>csrf如何防御<br>如何生成token<br>Vue的diff能详细说一说吗<br>Vue子组件你的子组件方法是放在哪里的<br>Vue自定义指令<br>微信小程序接触过吗<br>微信小程序原理<br>TCP三次握手第三次失败了 客户端和服务端是如何处理的<br>301，302状态码区别，以及什么时候会返回这些状态。<br>node如何升级到webSoket<br>如何添加header头<br>DNS迭代和递归区别<br>前端怎么设置cookie过期<br>有看过源码吗<br>看过哪些书<br>能来实习的时间<br>智商题<br>一个班级60%喜欢足球，70%喜欢篮球，80%喜欢排球 求同时喜欢足球和篮球的<br>算法 最大的回文字符<br>北森<br>一面<br>面试官非常nice，善于引导<br>自我介绍<br>你的项目<br>能说下vue如何收集依赖双向绑定的吗<br>能说下vue如何更新节点的吗<br>node如何打印时间与错误<br>webpack构建流程<br>webpack如何找到依赖关系的<br>webpack如何配置<br>vue和react区别<br>react生命周期<br>函数式组件，如何给状态（hook）<br>原型链，原型知道多少<br>es6了解哪些<br>promise.resolve()<br>http状态码<br>post请求之前先发送Option条件<br>get,post,put,delete区别（冥等）<br>二面<br>面试官是个女架构师，感觉非常好，还因为迟到了几分钟说道歉之类的<br>vue,react，你更倾向于哪一个，为什么<br>es6模块cmd amd 区别<br>跨域<br>深拷贝，浅拷贝<br>post发送Option的条件<br>输入URL到浏览器会发生什么<br>TCP为什么三次握手<br>TCP为什么四次挥手<br>HTTP为什么基于TCP协议<br>vue diff过程<br>vue如果同一个数据，很短的时间内连续更新 会怎么样。<br>算法题<br>[0,0,1,1,1,2,3,4,5]，不借用辅助空间找到不重复项[2，3，4，5]</p><p>三面<br>面试官是技术总监，问的问题都是基于场景来说的，面试体验还可以<br>有这样一个数组，你如何扁平化<br>如果用字符串形式会出现什么问题<br>跨域你如何处理的<br>能说说同源策略吗，那如果是直接请求ip会有同源策略吗，如果一个域名对应多个ip的情况呢。<br>你以前做的项目，如果让你去完善你能说一说完善的细节吗，说三点 （我提到模块化，规范化，可扩展性）<br>能具体一点说说吗，说一点就可以<br>你觉得你相比其他实习生的优点和缺点在哪里</p><p>前天过了一面。问的有基础的知识和CSS、JS应用的知识，还问了OSI七层网络。其实自我感觉回答的不太好，面试官也说框架知识和项目经验不太足够，没想到过了。<br>了项目难点，然后还考了osi网络层级，怎么用css实现表格奇偶行不同颜色，怎么根据表格行的颜色拿到行数，还问了vue的生命周期钩子函数，vue-cli不过我没答上来</p><p>007bcc9b9629c19abe2d66d4ceb0c0006f9fd8e8</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue双向绑定原理及实现</title>
    <link href="http://yoursite.com/2019/04/15/Vue/Vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/04/15/Vue/Vue双向绑定原理及实现/</id>
    <published>2019-04-15T06:33:31.000Z</published>
    <updated>2019-04-16T03:21:51.713Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><h4 id="双向绑定方法"><a href="#双向绑定方法" class="headerlink" title="双向绑定方法"></a>双向绑定方法</h4><p>发布者-订阅者模式（<code>backbone.js</code>）<br>脏值检查（<code>angular.js</code>）<br>数据劫持（<code>vue.js</code>）<br>发布者-订阅者模式: 一般通过<code>sub, pub</code>的方式实现数据和视图的绑定监听，更新数据方式通常做法是 <code>vm.set(&#39;property&#39;, value)</code><br>脏值检查: angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 <code>setInterval()</code> 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下：<br>　　DOM事件，譬如用户输入文本，点击按钮等。( <code>ng-click</code> )<br>　　XHR响应事件 ( <code>$http</code> )<br>　　浏览器<code>Location</code>变更事件 ( <code>$location</code> )<br>　　Timer事件( <code>$timeout</code> , <code>$interval</code> )<br>　　执行 <code>$digest()</code> 或 <code>$apply()</code><br>数据劫持:<br>　　<code>vue.js</code> 则是采用<code>数据劫持结合发布者-订阅者模式</code>的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。<br>　　<code>Vue</code> 响应系统，其核心有三点：<code>observe</code>、<code>watcher</code>、<code>dep</code>：<br>　　　　<code>observe</code>：遍历 <code>data</code> 中的属性，使用 <code>Object.defineProperty</code> 的 <code>get/set</code> 方法对其进行数据劫持；<br>　　　　<code>dep</code>：每个属性拥有自己的消息订阅器 <code>dep</code>，用于存放所有订阅了该属性的观察者对象；<br>　　　　<code>watcher</code>：观察者（对象），通过 <code>dep</code> 实现对响应属性的监听，监听到结果后，主动触发自己的回调进行响应。<br>实现虚拟DOM包含以下三个步骤：<br>　　用JS对象模拟DOM树<br>　　比较两棵虚拟DOM树的差异, Diff算法<br>　　映射成真实DOM</p><h4 id="Vue-双向数据绑定的原理"><a href="#Vue-双向数据绑定的原理" class="headerlink" title="Vue 双向数据绑定的原理"></a>Vue 双向数据绑定的原理</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object​.define​Property()</a><br>属性描述符有两种主要形式：<code>数据描述符</code>和<code>存取描述符</code>。数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。存取描述符是由getter-setter函数对描述的属性。描述符必须是这两种形式之一；不能同时是两者。<br><code>Object.defineProperty</code>是<code>ES5</code>新增的一个<code>API</code>，其作用是给对象的属性增加更多的控制<br><code>Object.defineProperty(obj, prop, descriptor)</code><br>参数 :<br>　　<code>obj</code>: 需要定义属性的对象（目标对象）<br>　　<code>prop</code>: 需被定义或修改的属性名（对象上的属性或者方法）<br>对于<code>setter</code>和<code>getter</code>，我的理解是它们是一对勾子（<code>hook</code>）函数，当你对一个对象的某个属性赋值时，则会自动调用相应的<code>setter</code>函数；而当获取属性时，则调用<code>getter</code>函数。这也是实现双向数据绑定的关键。<br>　　<code>descriptor</code>: 将被定义或修改的属性描述符。<br>描述:<br>　　该方法允许精确添加或修改对象的属性。通过赋值操作添加的普通属性是可枚举的，能够在属性枚举期间呈现出来（<code>for...in</code> 或 <code>Object.keys</code> 方法）， 这些属性的值可以被改变，也可以被删除。这个方法允许修改默认的额外选项（或配置）。<code>默认情况下</code>，使用 <code>Object.defineProperty()</code> 添加的属性值是<code>不可修改</code>的。</p><p>整理思路<br>实现mvvm的双向绑定，就必须要实现以下几点：<br>1、实现一个数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者<br>2、实现一个指令解析器Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数<br>3、实现一个Watcher，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图<br>4、mvvm入口函数，整合以上三者<br>observer用来实现对每个vue中的data中定义的属性循环用<code>Object.defineProperty()</code>实现数据劫持，以便利用其中的setter和getter，然后通知订阅者，订阅者会触发它的update方法，对视图进行更新。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们介绍为什么要订阅者，在`vue`中`v-model`，`v-name`，`&#123;&#123;&#125;&#125;`等都可以</span><br><span class="line">对数据进行显示，也就是说假如一个属性都通过这三个指令了，那么每当这个属性</span><br><span class="line">改变的时候，相应的这个三个指令的html视图也必须改变，于是vue中就是每当有</span><br><span class="line">这样的可能用到双向绑定的指令，就在一个Dep中增加一个订阅者，其订阅者只是</span><br><span class="line">更新自己的指令对应的数据，也就是`v-model=<span class="string">'name'</span>`和`&#123;&#123;name&#125;&#125;`有两个对</span><br><span class="line">应的订阅者，各自管理自己的地方。每当属性的<span class="built_in">set</span>方法触发，就循环更新Dep中</span><br><span class="line">的订阅者。</span><br></pre></td></tr></table></figure></p><p><code>Object.defineProperty</code>缺陷：<br>只能对属性进行数据劫持，对于JS对象劫持需要深度遍历；<br>对于数组不能监听到数据的变化，而是通过一些hack办法来实现，如<code>push、pop、shift、unshift、splice、sort、reverse</code></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="前端框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>函数节流与防抖</title>
    <link href="http://yoursite.com/2019/04/15/JavaScript/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/"/>
    <id>http://yoursite.com/2019/04/15/JavaScript/函数节流与防抖/</id>
    <published>2019-04-15T00:09:39.000Z</published>
    <updated>2019-04-15T10:37:54.194Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;防抖和节流&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        button &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">        .<span class="built_in">log</span> &#123;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 30px;</span><br><span class="line">            border: 1px solid <span class="comment">#ccc;</span></span><br><span class="line">            margin-top: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">"debounced"</span>&gt;Debounced&lt;/button&gt;</span><br><span class="line">    &lt;button id=<span class="string">"throttled"</span>&gt;Throttled&lt;/button&gt;</span><br><span class="line">    &lt;div id=<span class="string">"log1"</span> class=<span class="string">"log"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">"log2"</span> class=<span class="string">"log"</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        /*</span><br><span class="line">          节流说白了就是每ms执行一次函数，</span><br><span class="line">          防抖就是 我最后一次触发后ms后执行一次回调函数</span><br><span class="line">        */</span><br><span class="line">        /*debounced（防抖动）函数，该函数会从上一次被调用后，延迟 <span class="built_in">wait</span> 毫秒后调用 fn 方法。*/</span><br><span class="line">        <span class="keyword">function</span> debounce(fn, <span class="built_in">wait</span>, options) &#123;</span><br><span class="line">            // 等待时间</span><br><span class="line">            <span class="built_in">wait</span> = <span class="built_in">wait</span> || 0</span><br><span class="line">            // 点击次数</span><br><span class="line">            <span class="built_in">let</span> timerId;</span><br><span class="line">            console.log(<span class="string">"timerId:"</span>, timerId);</span><br><span class="line">            // 这个函数的功能是：</span><br><span class="line">            // </span><br><span class="line">            <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">                <span class="keyword">if</span> (timerId) &#123;</span><br><span class="line">                    clearTimeout(timerId);</span><br><span class="line">                    timerId = null;</span><br><span class="line">                &#125;</span><br><span class="line">                timerId = setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">                    fn();</span><br><span class="line">                &#125;, <span class="built_in">wait</span>);</span><br><span class="line">                console.log(<span class="string">"timerId:"</span>, timerId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 节流函数，在 <span class="built_in">wait</span> 秒内最多执行 fn 一次的函数。</span><br><span class="line">        <span class="keyword">function</span> throttle(fn, <span class="built_in">wait</span>, options) &#123;</span><br><span class="line">            <span class="built_in">wait</span> = <span class="built_in">wait</span> || 0;</span><br><span class="line">            <span class="built_in">let</span> timerId;</span><br><span class="line">            <span class="built_in">let</span> lastTime = 0;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">                <span class="built_in">let</span> currentTime = new Date();</span><br><span class="line">                <span class="keyword">if</span> (currentTime &gt;= lastTime + <span class="built_in">wait</span>) &#123;</span><br><span class="line">                    fn();</span><br><span class="line">                    lastTime = currentTime;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (timerId) &#123;</span><br><span class="line">                        clearTimeout(timerId);</span><br><span class="line">                        timerId = null;</span><br><span class="line">                    &#125;</span><br><span class="line">                    timerId = setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">                        fn();</span><br><span class="line">                    &#125;, <span class="built_in">wait</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">let</span> debouncedBtn = document.getElementById(<span class="string">'debounced'</span>);</span><br><span class="line">        <span class="built_in">let</span> throttledBtn = document.getElementById(<span class="string">'throttled'</span>);</span><br><span class="line">        <span class="built_in">let</span> log1 = document.getElementById(<span class="string">'log1'</span>);</span><br><span class="line">        <span class="built_in">let</span> log2 = document.getElementById(<span class="string">'log2'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">handleDebounce</span></span>() &#123;</span><br><span class="line">            log1.innerHTML += <span class="string">'debounced'</span>;</span><br><span class="line">            console.log(<span class="string">"debounced"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="function"><span class="title">handleThrottle</span></span>() &#123;</span><br><span class="line">            log2.innerHTML += <span class="string">'throttle'</span>;</span><br><span class="line">            console.log(<span class="string">"throttle"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        debouncedBtn.addEventListener(<span class="string">'click'</span>, debounce(handleDebounce, 2000));</span><br><span class="line">        throttledBtn.addEventListener(<span class="string">'click'</span>, throttle(handleThrottle, 2000));</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="http://yoursite.com/2019/04/11/Ajax/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2019/04/11/Ajax/跨域/</id>
    <published>2019-04-11T07:36:13.000Z</published>
    <updated>2019-04-11T08:58:37.980Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><p><a href="https://juejin.im/post/5a2f92c65188253e2470f16d" target="_blank" rel="noopener">正确面对跨域，别慌</a><br><a href="https://segmentfault.com/a/1190000011145364" target="_blank" rel="noopener">前端常见跨域解决方案（全）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="AJAX" scheme="http://yoursite.com/categories/AJAX/"/>
    
    
      <category term="AJAX" scheme="http://yoursite.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>CSS3选择器</title>
    <link href="http://yoursite.com/2019/04/11/CSS3/CSS3%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2019/04/11/CSS3/CSS3选择器/</id>
    <published>2019-04-11T02:13:51.000Z</published>
    <updated>2019-04-11T03:13:05.791Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><p>转载：<br><a href="https://segmentfault.com/a/1190000003064142" target="_blank" rel="noopener">CSS &gt; 选择器优先级与效率优化</a></p><h3 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h3><p>　　important声明 1,0,0,0<br>　　ID选择器      0,1,0,0<br>　　类选择器      0,0,1,0<br>　　伪类选择器    0,0,1,0<br>　　属性选择器    0,0,1,0<br>　　标签选择器    0,0,0,1<br>　　伪元素选择器  0,0,0,1<br>　　通配符选择器  0,0,0,0<br>important &gt; 行内样式</p><h3 id="选择器效率"><a href="#选择器效率" class="headerlink" title="选择器效率"></a>选择器效率</h3><p>　　读取选择器的原则是<code>从右到左</code>。因此，我们书写的右边的最后一个选择器，被称作<code>关键选择器</code>，对于效率有决定性影响。<br>选择器效率：<br>　　ID选择器<br>　　类选择器<br>　　标签选择器<br>　　相邻选择器<br>　　子选择器<br>　　后代选择器<br>　　通配符选择器<br>　　属性选择器<br>　　伪类选择器<br><strong>优先级高的不一定效率高</strong><br>举个例子：<code>#id .class</code> 与 <code>div#id p.class</code><br>前者效率高于后者，而后者优先级高于前者。我们需要在效率与优先级之间平衡取舍。</p><h3 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h3><p>扼要摘其精要总结如下：<br>　　避免使用通配符<br>　　不使用标签名或类名修饰ID规则：如果规则使用ID选择器作为关键选择器，不要给规则添加标签名。因为ID本身就是唯一的，添加标签名会不必要地降低匹配效率。<br>　　不使用标签名修饰类：相较于标签，类更具独特性。<br>　　尽量选择最具体的方式：造成低效的最简单粗暴的原因就是在标签上使用太多规则。给元素添加类可以更快细分到类方式，可以减少规则去匹配标签的时间。<br>　　关于后代选择器和子选择器：避免使用后代选择器，非要用的话建议用子选择器代替，但子选择器也要慎用，标签规则永远不要包含子选择器。<br>　　利用可继承性：没必要在一般内容上声明样式。</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>数组操作</title>
    <link href="http://yoursite.com/2019/04/11/JavaScript/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/04/11/JavaScript/数组操作/</id>
    <published>2019-04-11T00:49:01.000Z</published>
    <updated>2019-04-14T12:43:47.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><h3 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h3><h4 id="改变原始数组的操作方法"><a href="#改变原始数组的操作方法" class="headerlink" title="改变原始数组的操作方法"></a>改变原始数组的操作方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向数组末尾添加元素，并返回新的长度</span></span><br><span class="line">push</span><br><span class="line"><span class="comment"># 删除最后一个并返回删除的元素</span></span><br><span class="line">pop</span><br><span class="line"><span class="comment"># 向数组开头添加元素，并返回新的长度</span></span><br><span class="line">unshift</span><br><span class="line"><span class="comment"># 将第一个元素删除并且返回删除元素，空即为undefined</span></span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="comment"># 颠倒数组顺序</span></span><br><span class="line">reverse</span><br><span class="line"><span class="comment"># 对数组排序</span></span><br><span class="line">sort</span><br><span class="line"><span class="comment"># 删，增，替换数组元素，返回被删除数组，无删除则不返回</span></span><br><span class="line">splice</span><br><span class="line"><span class="comment"># 用于从数组的指定位置拷贝元素到数组的另一个指定位置中。</span></span><br><span class="line">copyWithin</span><br><span class="line"><span class="comment"># 用于将一个固定值替换数组的元素。</span></span><br><span class="line">fill</span><br></pre></td></tr></table></figure><h5 id="splice-添加-删除数组元素"><a href="#splice-添加-删除数组元素" class="headerlink" title="splice() 添加/删除数组元素"></a>splice() 添加/删除数组元素</h5><p>定义： <code>splice()</code> 方法向/从数组中添加/删除项目，然后返回被删除的项目<br><code>array.splice(index,howmany,item1,.....,itemX)</code><br>参数:<br>　　<code>index</code>：必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。<br>　　<code>howmany</code>：可选。要删除的项目数量。如果设置为 0，则不会删除项目。<br>　　<code>item1, ..., itemX</code>： 可选。向数组添加的新项目。<br><strong>删除元素</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> a = [1, 2, 3, 4, 5, 6, 7];</span><br><span class="line"><span class="built_in">let</span> item = a.splice(0, 3); // [1,2,3]</span><br><span class="line">console.log(a); // [4,5,6,7]</span><br><span class="line">// 从数组下标0开始，删除3个元素</span><br><span class="line"><span class="built_in">let</span> item = a.splice(-1, 3); // [7]</span><br><span class="line">// 从最后一个元素开始删除3个元素，因为最后一个元素，所以只删除了7</span><br></pre></td></tr></table></figure></p><p><strong>删除并添加</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> a = [1, 2, 3, 4, 5, 6, 7];</span><br><span class="line"><span class="built_in">let</span> item = a.splice(0,3,<span class="string">'添加'</span>); // [1,2,3]</span><br><span class="line">console.log(a); // [<span class="string">'添加'</span>,4,5,6,7]</span><br><span class="line">// 从数组下标0开始，删除3个元素，并添加元素<span class="string">'添加'</span></span><br><span class="line"><span class="built_in">let</span> b = [1, 2, 3, 4, 5, 6, 7];</span><br><span class="line"><span class="built_in">let</span> item = b.splice(-2,3,<span class="string">'添加1'</span>,<span class="string">'添加2'</span>); // [6,7]</span><br><span class="line">console.log(b); // [1,2,3,4,5,<span class="string">'添加1'</span>,<span class="string">'添加2'</span>]</span><br><span class="line">// 从数组最后第二个元素开始，删除3个元素，并添加两个元素<span class="string">'添加1'</span>、<span class="string">'添加2'</span></span><br></pre></td></tr></table></figure></p><p><strong>添加元素</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> a = [1, 2, 3, 4, 5, 6, 7];</span><br><span class="line">// [] 没有删除元素，返回空数组</span><br><span class="line"><span class="built_in">let</span> item = a.splice(0,0,<span class="string">'添加1'</span>,<span class="string">'添加2'</span>); </span><br><span class="line">console.log(a); // [<span class="string">'添加1'</span>,<span class="string">'添加2'</span>,1,2,3,4,5,6,7]</span><br><span class="line"><span class="built_in">let</span> b = [1, 2, 3, 4, 5, 6, 7];</span><br><span class="line">// [] 没有删除元素，返回空数组</span><br><span class="line"><span class="built_in">let</span> item = b.splice(-1,0,<span class="string">'添加1'</span>,<span class="string">'添加2'</span>); </span><br><span class="line">// [1,2,3,4,5,6,<span class="string">'添加1'</span>,<span class="string">'添加2'</span>,7] 在最后一个元素的前面添加两个元素</span><br><span class="line">console.log(b);</span><br></pre></td></tr></table></figure></p><p>　　数组如果元素不够，会删除到最后一个元素为止<br>　　操作的元素，包括开始的那个元素<br>　　可以添加很多个元素<br>　　添加是在开始的元素前面添加的</p><h5 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h5><h5 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h5><h5 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h5><h5 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h5><h5 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h5><h5 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h5><h5 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin()"></a>copyWithin()</h5><h5 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h5><h4 id="不改变原始数组的操作方法"><a href="#不改变原始数组的操作方法" class="headerlink" title="不改变原始数组的操作方法"></a>不改变原始数组的操作方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接多个数组，返回新的数组</span></span><br><span class="line">concat</span><br><span class="line"><span class="comment"># 将数组中所有元素以参数作为分隔符放入一个字符</span></span><br><span class="line">join</span><br><span class="line"><span class="comment"># 返回选定元素</span></span><br><span class="line">slice</span><br><span class="line"><span class="comment"># 数组映射为新的数组</span></span><br><span class="line">map(es6)</span><br><span class="line"><span class="comment"># 数组过滤，返回所有通过方法判断后(判断为true时)生成的新数组</span></span><br><span class="line">filter(es6)</span><br><span class="line"><span class="comment"># 数组遍历，没有返回值</span></span><br><span class="line">forEach</span><br><span class="line"><span class="comment"># 对数组中的每一项运行给定函数，如每一项均为true时返回true，否则返回false</span></span><br><span class="line">every(es6)</span><br><span class="line"><span class="comment"># 数组中的的元素运行给定函数，如其中有一项为true时返回true，</span></span><br><span class="line"><span class="comment"># 此时剩余的元素不会再执行检测，如果所以都为false则返回false</span></span><br><span class="line">some(es6)</span><br><span class="line"><span class="comment"># 寻找数组中符合测试方法（函数）条件的第一个元素，并且返回该元素</span></span><br><span class="line">find(es6)</span><br><span class="line"><span class="comment"># 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</span></span><br><span class="line">reduce(es6)</span><br><span class="line"><span class="comment"># 方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</span></span><br><span class="line">indexOf</span><br><span class="line"><span class="comment"># 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回true，否则返回false。</span></span><br><span class="line">includes(es7)</span><br></pre></td></tr></table></figure><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><h4 id="toLocaleString-数组转字符串"><a href="#toLocaleString-数组转字符串" class="headerlink" title="toLocaleString() 数组转字符串"></a>toLocaleString() 数组转字符串</h4><h4 id="toString-数组转字符串-不推荐"><a href="#toString-数组转字符串-不推荐" class="headerlink" title="toString() 数组转字符串 不推荐"></a>toString() 数组转字符串 不推荐</h4><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><h4 id="ES6扩展运算符…合并数组"><a href="#ES6扩展运算符…合并数组" class="headerlink" title="ES6扩展运算符…合并数组"></a>ES6扩展运算符…合并数组</h4><h4 id="indexOf-查找数组是否存在某个元素，返回下标"><a href="#indexOf-查找数组是否存在某个元素，返回下标" class="headerlink" title="indexOf() 查找数组是否存在某个元素，返回下标"></a>indexOf() 查找数组是否存在某个元素，返回下标</h4><h4 id="lastIndexOf-查找指定元素在数组中的最后一个位置"><a href="#lastIndexOf-查找指定元素在数组中的最后一个位置" class="headerlink" title="lastIndexOf() 查找指定元素在数组中的最后一个位置"></a>lastIndexOf() 查找指定元素在数组中的最后一个位置</h4><h4 id="ES7-includes-查找数组是否包含某个元素-返回布尔"><a href="#ES7-includes-查找数组是否包含某个元素-返回布尔" class="headerlink" title="ES7 includes() 查找数组是否包含某个元素 返回布尔"></a>ES7 includes() 查找数组是否包含某个元素 返回布尔</h4><h3 id="遍历方法-12个"><a href="#遍历方法-12个" class="headerlink" title="遍历方法(12个):"></a>遍历方法(12个):</h3><h4 id="关于forEach-你要知道："><a href="#关于forEach-你要知道：" class="headerlink" title="关于forEach()你要知道："></a>关于forEach()你要知道：</h4><h4 id="every-检测数组所有元素是否都符合判断条件"><a href="#every-检测数组所有元素是否都符合判断条件" class="headerlink" title="every 检测数组所有元素是否都符合判断条件"></a>every 检测数组所有元素是否都符合判断条件</h4><h4 id="some-数组中的是否有满足判断条件的元素"><a href="#some-数组中的是否有满足判断条件的元素" class="headerlink" title="some 数组中的是否有满足判断条件的元素"></a>some 数组中的是否有满足判断条件的元素</h4><h4 id="filter-过滤原始数组，返回新数组"><a href="#filter-过滤原始数组，返回新数组" class="headerlink" title="filter 过滤原始数组，返回新数组"></a>filter 过滤原始数组，返回新数组</h4><h4 id="map-对数组中的每个元素进行处理，返回新的数组"><a href="#map-对数组中的每个元素进行处理，返回新的数组" class="headerlink" title="map 对数组中的每个元素进行处理，返回新的数组"></a>map 对数组中的每个元素进行处理，返回新的数组</h4><h4 id="reduce-为数组提供累加器，合并为一个值"><a href="#reduce-为数组提供累加器，合并为一个值" class="headerlink" title="reduce 为数组提供累加器，合并为一个值"></a>reduce 为数组提供累加器，合并为一个值</h4><h4 id="reduceRight-从右至左累加"><a href="#reduceRight-从右至左累加" class="headerlink" title="reduceRight 从右至左累加"></a>reduceRight 从右至左累加</h4><h4 id="ES6-find-amp-findIndex-根据条件找到数组成员"><a href="#ES6-find-amp-findIndex-根据条件找到数组成员" class="headerlink" title="ES6 find()&amp; findIndex() 根据条件找到数组成员"></a>ES6 find()&amp; findIndex() 根据条件找到数组成员</h4><h4 id="ES6-keys-amp-values-amp-entries-遍历键名、遍历键值、遍历键名-键值"><a href="#ES6-keys-amp-values-amp-entries-遍历键名、遍历键值、遍历键名-键值" class="headerlink" title="ES6 keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值"></a>ES6 keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[【干货】js 数组详细操作方法及解析合集](https://juejin.im/post/5b0903b26fb9a07a9d70c7e0)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>原型&amp;&amp;原型链</title>
    <link href="http://yoursite.com/2019/04/10/JavaScript/%E5%8E%9F%E5%9E%8B&amp;&amp;%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2019/04/10/JavaScript/原型&amp;&amp;原型链/</id>
    <published>2019-04-10T07:34:11.000Z</published>
    <updated>2019-04-22T01:14:52.133Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>摘自JavaScript高级程序设计:<br>　　继承是OO语言中的一个最为人津津乐道的概念.许多OO语言都支持两种继承方式: <code>接口继承</code> 和 <code>实现继承</code> .<code>接口继承只继承方法签名</code>,而<code>实现继承则继承实际的方法</code>.由于js中方法没有签名,在ECMAScript中无法实现接口继承.ECMAScript只支持实现继承,而且其 实现继承 主要是依靠<code>原型链</code>来实现的.<br>　　在 JavaScript 中，是一种面向对象的程序设计语言，但是 JS 本身是没有 “类” 的概念，JS 是靠原型和原型链实现对象属性的继承。<br>　　在理解原型前，需要先知道对象的构造函数是什么，构造函数都有什么特点？</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 构造函数 Person()</span><br><span class="line"><span class="keyword">function</span> Person(name, gender) &#123;</span><br><span class="line">  this.name = name;</span><br><span class="line">  this.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line">var person = new Person(<span class="string">"周杰伦"</span>, <span class="string">"男"</span>);</span><br><span class="line">// 最后创建出来的对象实例 person</span><br><span class="line">person</span><br><span class="line">&#123;</span><br><span class="line">  name: <span class="string">"周杰伦"</span>,</span><br><span class="line">  gender: <span class="string">"男"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码，普通函数 <code>Person()</code>，加上 <code>new</code> 关键字后，就构造了一个对象 <code>person</code><br>所以构造函数的定义就是普通函数加上 <code>new</code> 关键字，并总会返回一个对象。</p><h4 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h4><p>　　同时，JS 中的对象分为一般对象和函数对象。那什么是一般对象，什么又是函数对象呢？<br>　　<code>JavaScript</code> 的类型分为<code>基本数据类型</code>和<code>引用数据类型</code>，基本数据类型目前有 6 种（<code>null</code>, <code>undefined</code>, <code>string</code>, <code>number</code>, <code>boolean</code>, <code>Symbol</code>）。 其余的数据类型都统称为 <code>object</code> 数据类型，其中，包括 <code>Array</code>, <code>Date</code>, <code>Function</code>等，所以函数可以称为函数对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> foo = <span class="function"><span class="title">function</span></span>()&#123;&#125;</span><br><span class="line">foo.name = <span class="string">"bar"</span>;</span><br><span class="line">foo.age = 24;</span><br><span class="line">console.log(foo instanceof Function)  //<span class="literal">true</span></span><br><span class="line">console.log(foo.age)  // 24</span><br></pre></td></tr></table></figure></p><p>以上代码就说明了<code>函数其实是一个对象，也可以具有属性</code>。</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>　　<code>JavaScript</code> 中的对象，有一个特殊的 <code>[[prototype]]</code> 属性, 其实就是对于其他对象的引用（委托）。当我们在获取一个对象的属性时，如果这个对象上没有这个属性，那么 JS 会沿着对象的 <code>[[prototype]]</code>链 一层一层地去找，最后如果没找到就返回 <code>undefined</code>;<br>这条一层一层的查找属性的方式，就叫做原型链。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var o1 = &#123;</span><br><span class="line">  age: 6</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　那么，为什么一个对象要引用，或者说要委托另外一个对象来寻找属性呢？<br>　　本文开篇的第一句话，就指出来的，JavaScript 中，和一般的 OOP 语言不同，它没有 ‘类’的概念，也就没有 ‘模板’ 来创建对象，而是通过字面量或者构造函数的方式直接创建对象。那么也就不存在所谓的类的复制继承。</p><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>　　那什么又是原型呢？<br>　　既然我们没有类，就用其他的方式实现类的行为吧，看下面这句话↓↓。</p><h4 id="每个函数都有一个原型属性-prototype-对象"><a href="#每个函数都有一个原型属性-prototype-对象" class="headerlink" title="每个函数都有一个原型属性 prototype 对象"></a>每个函数都有一个原型属性 prototype 对象</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Person</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">'JayChou'</span>;</span><br><span class="line">// person1 和 person2 都是空对象</span><br><span class="line">var person1 = new Person();</span><br><span class="line">var person2 = new Person();</span><br><span class="line"></span><br><span class="line">console.log(person1.name) // JayChou</span><br><span class="line">console.log(person2.name) // JayChou</span><br></pre></td></tr></table></figure><p>　　通过构造函数创造的对象，对象在寻找 name 属性时，找到了 构造函数的 prototype 对象上。<br>　　这个构造函数的 prototype 对象，就是 <code>原型</code><br>用示意图来表示：<br><img src="/assets/images/原型.png" alt="原型"><br>　　查找对象实例属性时，会沿着原型链向上找，在现代浏览器中，标准让每个对象都有一个 <code>__proto__</code> 属性，指向原型对象。那么，我们可以知道对象实例和函数原型对象之间的关系。<br><img src="/assets/images/原型1.png" alt="原型"></p><h4 id="每个原型对象都有一个-constructor-属性指向关联的构造函数"><a href="#每个原型对象都有一个-constructor-属性指向关联的构造函数" class="headerlink" title="每个原型对象都有一个 constructor 属性指向关联的构造函数"></a>每个原型对象都有一个 constructor 属性指向关联的构造函数</h4><p>为了验证这一说话，举个例子。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Person</span></span>() &#123;&#125;</span><br><span class="line">Person === Person.prototype.constructor; // <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>那么对象实例是构造函数构造而来，那么对象实例是不是也应该有一个 <code>constructor</code> 呢？<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">Person</span></span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">const person = new Person();</span><br><span class="line">person.constructor === Person // <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>但事实上，对象实例本身并没有 <code>constructor</code> 属性，对象实例的 <code>constructor</code> 属性来自于引用了原型对象的 <code>constructor</code> 属性<br><code>person.constructor === Person.prototype.constructor // true</code><br><img src="/assets/images/原型2.png" alt="原型"></p><h4 id="原型链顶层：Object-prototype-proto-null"><a href="#原型链顶层：Object-prototype-proto-null" class="headerlink" title="原型链顶层：Object.prototype.__proto__== null"></a>原型链顶层：<code>Object.prototype.__proto__== null</code></h4><p>　　既然 JS 通过原型链查找属性，那么链的顶层是什么呢，答案就是 <code>Object</code> 对象，<code>Object</code> 对象其实也有 <code>__proto__</code>属性，比较特殊的是 <code>Object.prototype.__proto__</code> 指向 <code>null</code>, 也就是空。<br><code>Object.prototype.__proto__ === null</code><br><img src="/assets/images/原型3.png" alt="原型"><br>我们回过头来看函数对象：</p><blockquote><p>所有函数对象的<code>proto</code>都指向<code>Function.prototype</code>，它是一个空函数（<code>Empty function</code>）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Number.__proto__ === Function.prototype  // <span class="literal">true</span></span><br><span class="line">Number.constructor == Function //<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Boolean.__proto__ === Function.prototype // <span class="literal">true</span></span><br><span class="line">Boolean.constructor == Function //<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">String.__proto__ === Function.prototype  // <span class="literal">true</span></span><br><span class="line">String.constructor == Function //<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">// 所有的构造器都来自于Function.prototype,</span><br><span class="line">// 甚至包括根构造器Object及Function自身</span><br><span class="line">Object.__proto__ === Function.prototype  // <span class="literal">true</span></span><br><span class="line">Object.constructor == Function // <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">// 所有的构造器都来自于Function.prototype，</span><br><span class="line">// 甚至包括根构造器Object及Function自身</span><br><span class="line">Function.__proto__ === Function.prototype // <span class="literal">true</span></span><br><span class="line">Function.constructor == Function //<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Array.__proto__ === Function.prototype   // <span class="literal">true</span></span><br><span class="line">Array.constructor == Function //<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">RegExp.__proto__ === Function.prototype  // <span class="literal">true</span></span><br><span class="line">RegExp.constructor == Function //<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Error.__proto__ === Function.prototype   // <span class="literal">true</span></span><br><span class="line">Error.constructor == Function //<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Date.__proto__ === Function.prototype    // <span class="literal">true</span></span><br><span class="line">Date.constructor == Function //<span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>所有的构造器都来自于 <code>Function.prototype</code>，甚至包括根构造器<code>Object</code>及<code>Function</code>自身。所有构造器都继承了·<code>Function.prototype</code>·的属性及方法。如<code>length</code>、<code>call</code>、<code>apply</code>、<code>bind</code></p></blockquote><p>以图会友，这就是网上经常看到的 JS 原型和原型链关系图：<br><img src="/assets/images/原型4.png" alt="原型"></p><p>对于以上看似很复杂的关系图，只需要理解 5 点：<br>　　每个函数都有一个原型属性 <code>prototype</code> 对象<br>　　普通对象的构造函数是 <code>Object()</code>，所以 <code>Person.prototype.__proto__ === Object.prototype</code><br>　　函数对象都来自于 <code>Function.prototype</code><br>　　函数对象也是对象，所有 <code>Function.prototype.__proto__ === Object.prototype</code><br>　　记住，所有函数原型的都是 <code>Object()</code> 的实例<br>　　<code>Object.prototype.__proto__</code> 是 <code>null</code></p><p>转载：<br>　　<a href="https://juejin.im/post/5bc755b15188255c89015f39" target="_blank" rel="noopener">JavaScript原型与原型链</a><br>参考：<br>　　<a href="https://juejin.im/post/5c72a1766fb9a049ea3993e6#chapter-one" target="_blank" rel="noopener">2019 面试准备 - JS 原型与原型链</a><br>　　<a href="https://juejin.im/post/58f94c9bb123db411953691b#heading-2" target="_blank" rel="noopener">JS原型链与继承别再被问倒了</a><br>　　<a href="https://juejin.im/post/5835853f570c35005e413b19#heading-0" target="_blank" rel="noopener">三张图搞懂JavaScript的原型对象与原型链</a><br>　　<a href="https://hexianzhi.github.io/2017/04/27/JavaScript%E5%8E%9F%E5%9E%8B/" target="_blank" rel="noopener">JavaScript原型及原型链</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue知识点详解</title>
    <link href="http://yoursite.com/2019/04/09/Vue/Vue%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/04/09/Vue/Vue知识点详解/</id>
    <published>2019-04-09T06:07:35.000Z</published>
    <updated>2019-04-13T09:36:54.113Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><p>Vue watch computed nexttick<br>双向绑定 虚拟dom<br>Vue双向绑定原理/组件通讯<br>Vue 单双向绑定（dep watcher observer）</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="前端框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>宏任务&amp;&amp;微任务</title>
    <link href="http://yoursite.com/2019/04/09/JavaScript/%E5%AE%8F%E4%BB%BB%E5%8A%A1&amp;&amp;%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/04/09/JavaScript/宏任务&amp;&amp;微任务/</id>
    <published>2019-04-09T01:46:03.000Z</published>
    <updated>2019-04-22T03:08:16.039Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- toc --><a id="more"></a><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><code>JavaScript 是单线程、异步、非阻塞、解释型脚本语言。</code><br>　　微任务和宏任务皆为异步任务，它们都属于一个队列，主要区别在于他们的执行顺序，Event Loop的走向和取值。</p><h4 id="macrotask-宏任务"><a href="#macrotask-宏任务" class="headerlink" title="(macrotask)宏任务"></a>(macrotask)宏任务</h4><p>　　<code>macrotask</code>： 包括整体代码<code>script</code>、<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>、<code>requestAnimationFrame</code>、<code>I/O</code>、<code>UI rendering</code>等（可以看到，事件队列中的每一个事件都是一个 <code>macrotask</code>，现在称之为宏任务队列）</p><h4 id="microtask-微任务"><a href="#microtask-微任务" class="headerlink" title="(microtask)微任务"></a>(microtask)微任务</h4><p>　　<code>microtask</code>:<code>原生Promise</code>(有些实现的promise将then方法放到了宏任务中)、<code>process.nextTick</code>、<code>Promises</code>、Object.observe(已废弃)、 <code>MutationObserver</code> 记住就行了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">'script start'</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'timer over'</span>)</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">Promise.resolve().<span class="keyword">then</span>(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'promise1'</span>)</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    console.log(<span class="string">'promise2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">'script end'</span>)</span><br><span class="line"></span><br><span class="line">// script start</span><br><span class="line">// script end</span><br><span class="line">// promise1</span><br><span class="line">// promise2</span><br><span class="line">// timer over</span><br></pre></td></tr></table></figure></p><p>JS引擎线程首先执行主代码块。<br>　　每次执行栈执行的代码就是一个宏任务，包括任务队列(宏任务队列)中的，因为执行栈中的宏任务执行完会去取任务队列（宏任务队列）中的任务加入执行栈中，即同样是事件循环的机制。<br>　　在执行宏任务时遇到<code>Promise</code>等，会<code>创建微任务</code>（.then()里面的回调），并加入到<code>微任务队列队尾</code>。<br>　　<code>microtask</code>必然是在某个宏任务执行的时候创建的，而在下一个宏任务开始之前，浏览器会对页面重新渲染(<code>task &gt;&gt; 渲染 &gt;&gt; 下一个task(从任务队列中取一个)</code>)。同时，<code>在上一个宏任务执行完成后，渲染页面之前，会执行当前微任务队列中的所有微任务</code>。<br>　　也就是说: <code>在某一个 macrotask 执行完后，在重新渲染与开始下一个宏任务之前，就会将在它执行期间产生的所有 microtask 都执行完毕（在渲染前）</code>。<br>　　这样就可以解释 “promise 1” “promise 2” 在 “timer over” 之前打印了。”promise 1” “promise 2” 做为微任务加入到微任务队列中，而 “timer over” 做为宏任务加入到宏任务队列中，它们同时在等待被执行，但是微任务队列中的所有微任务都会在开始下一个宏任务之前都被执行完。</p><blockquote><p>在node环境下，<code>process.nextTick</code>的优先级高于<code>Promise</code>，也就是说：<code>在宏任务结束后会先执行微任务队列中的nextTickQueue，然后才会执行微任务中的Promise</code>。</p></blockquote><p>执行机制：<br>　　执行一个宏任务（栈中没有就从事件队列中获取）<br>　　执行过程中如果遇到微任务，就将它添加到微任务的任务队列中<br>　　宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）<br>　　当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染<br>　　渲染完毕后，JS引擎线程继续，开始下一个宏任务（从宏任务队列中获取）</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　<code>JavaScript</code> 是单线程语言，决定于它的设计最初是用来处理浏览器网页的交互。浏览器负责解释和执行 <code>JavaScript</code> 的线程只有一个（所有说是单线程），即<code>JS引擎线程</code>，但是浏览器同样提供其他线程，如：事件触发线程、定时器触发线程等。<br>异步一般是指：<br>　　<code>网络请求`</code><br>　　<code>计时器`</code><br>　　<code>DOM事件监听`</code><br>事件循环机制：<br>　　<code>JS引擎线程</code>会维护一个执行栈，同步代码会依次加入到执行栈中依次执行并出栈。<br>　　<code>JS引擎线程</code>遇到异步函数，会将异步函数交给相应的Webapi，而继续执行后面的任务。<br>　　<code>Webapi</code>会在条件满足的时候，将异步对应的回调加入到消息队列中，等待执行。<br>　　<code>执行栈为空时</code>，JS引擎线程会去取消息队列中的回调函数（如果有的话），并加入到执行栈中执行。<br>　　<code>完成后出栈</code>，执行栈再次为空，重复上面的操作，这就是事件循环(event loop)机制。</p><p>原文：<br>　　<a href="https://juejin.im/post/5be5a0b96fb9a049d518febc" target="_blank" rel="noopener">总结：JavaScript异步、事件循环与消息队列、微任务与宏任务</a><br>　　<a href="https://juejin.im/post/5b498d245188251b193d4059" target="_blank" rel="noopener">JS事件循环机制（event loop）之宏任务/微任务</a></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
